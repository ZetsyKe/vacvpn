import osimport os
import asyncio
import httpx
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder, WebAppInfo
from dotenv import load_dotenv
from typing import Dict, List
import sqlite3
from datetime import datetime
import json
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv("backend/key.env")
TOKEN = os.getenv("TOKEN")
WEB_APP_URL = "https://vacvpn.vercel.app"
SUPPORT_NICK = "@vacvpn_support"
TG_CHANNEL = "@vac_vpn"
API_BASE_URL = os.getenv("API_BASE_URL", "http://localhost:8000")  
BOT_USERNAME = "vaaaac_bot"

if not TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ key.env")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = Bot(
    token=TOKEN, 
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤)
def init_db():
    conn = sqlite3.connect('vacvpn.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS referrals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            referrer_id INTEGER,
            referred_id INTEGER,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
async def make_api_request(url: str, method: str = "GET", json_data: dict = None, params: dict = None):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API"""
    try:
        timeout_config = httpx.Timeout(30.0, connect=10.0)
        async with httpx.AsyncClient(timeout=timeout_config) as client:
            if method.upper() == "GET":
                response = await client.get(url, params=params)
            elif method.upper() == "POST":
                response = await client.post(url, json=json_data)
            else:
                raise ValueError(f"Unsupported method: {method}")
            
            if response.status_code == 200:
                return response.json()
            else:
                logger.error(f"API returned status {response.status_code}")
                return {"error": f"API error: {response.status_code}"}
                
    except Exception as e:
        logger.error(f"API request error: {e}")
        return {"error": f"Connection error: {str(e)}"}

async def get_user_info(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ API"""
    url = f"{API_BASE_URL}/user-data"
    params = {"user_id": str(user_id)}
    return await make_api_request(url, "GET", params=params)

async def create_user(user_data: dict):
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API"""
    url = f"{API_BASE_URL}/create-user"
    return await make_api_request(url, "POST", json_data=user_data)

async def create_payment(user_id: int, tariff: str, amount: float):
    """–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ API"""
    url = f"{API_BASE_URL}/create-payment"
    json_data = {
        "user_id": str(user_id),
        "tariff": tariff,
        "amount": amount,
        "description": f"–ü–æ–¥–ø–∏—Å–∫–∞ VAC VPN ({'–º–µ—Å—è—á–Ω–∞—è' if tariff == 'month' else '–≥–æ–¥–æ–≤–∞—è'})"
    }
    return await make_api_request(url, "POST", json_data=json_data)

async def check_payment_status(payment_id: str, user_id: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ API"""
    url = f"{API_BASE_URL}/payment-status"
    params = {"payment_id": payment_id, "user_id": user_id}
    return await make_api_request(url, "GET", params=params)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏ (–ª–æ–∫–∞–ª—å–Ω–∞—è –ë–î)
def add_referral(referrer_id: int, referred_id: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ"""
    conn = sqlite3.connect('vacvpn.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∑–∞–ø–∏—Å–∏
    cursor.execute('SELECT id FROM referrals WHERE referrer_id = ? AND referred_id = ?', 
                  (referrer_id, referred_id))
    existing = cursor.fetchone()
    
    if not existing:
        cursor.execute('INSERT INTO referrals (referrer_id, referred_id, created_at) VALUES (?, ?, ?)',
                      (referrer_id, referred_id, datetime.now().isoformat()))
        conn.commit()
        logger.info(f"–†–µ—Ñ–µ—Ä–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω: {referrer_id} -> {referred_id}")
    
    conn.close()

def get_referral_stats(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º"""
    conn = sqlite3.connect('vacvpn.db')
    cursor = conn.cursor()
    
    # –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ
    cursor.execute('SELECT COUNT(*) FROM referrals WHERE referrer_id = ?', (user_id,))
    total = cursor.fetchone()[0]
    
    conn.close()
    return total

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="üîê –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"),
        types.KeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª–∫–∞")
    )
    builder.row(
        types.KeyboardButton(text="üõ†Ô∏è –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞"),
        types.KeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
    )
    return builder.as_markup(resize_keyboard=True)

def get_cabinet_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="üì≤ –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∫–∞–±–∏–Ω–µ—Ç",
            web_app=WebAppInfo(url=WEB_APP_URL)
        )
    )
    builder.row(
        types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_cabinet"),
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    return builder.as_markup()

def get_tariff_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="üìÖ –ú–µ—Å—è—Ü - 299‚ÇΩ", callback_data="tariff_month"),
        types.InlineKeyboardButton(text="üìÖ –ì–æ–¥ - 2990‚ÇΩ", callback_data="tariff_year")
    )
    builder.row(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    return builder.as_markup()

def get_ref_keyboard(user_id: int):
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="ü§úü§õ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π",
            url=f"https://t.me/share/url?url=https://t.me/{BOT_USERNAME}?start=ref_{user_id}"
        )
    )
    builder.row(
        types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_refs"),
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    return builder.as_markup()

def get_support_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="üìû –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
            url=f"https://t.me/{SUPPORT_NICK[1:]}"
        )
    )
    builder.row(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    return builder.as_markup()

def get_payment_keyboard(payment_url: str, payment_id: str):
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=payment_url)
    )
    builder.row(
        types.InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{payment_id}"),
        types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã", callback_data=f"payment_status_{payment_id}")
    )
    builder.row(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    return builder.as_markup()

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def get_welcome_message(user_name: str, is_referral: bool = False):
    message = f"""
<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VAC VPN, {user_name}!</b>

üöÄ –ü–æ–ª—É—á–∏—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É —Å –Ω–∞—à–µ–π VPN-—Å–ª—É–∂–±–æ–π.

üìä <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ üîí –ó–∞—â–∏—Ç–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ üåê –û–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
‚Ä¢ üöÄ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
‚Ä¢ üì± –†–∞–±–æ—Ç–∞ –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö

üë´ <b>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å!</b>
"""
    if is_referral:
        message += "\nüéâ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ! –ë–æ–Ω—É—Å –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏."
    
    return message

async def get_cabinet_message(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–±–∏–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ API"""
    user_data = await get_user_info(user_id)
    
    if user_data and 'error' not in user_data:
        balance = user_data.get('balance', 0)
        has_subscription = user_data.get('has_subscription', False)
        subscription_end = user_data.get('subscription_end')
        days_remaining = user_data.get('days_remaining', 0)
        tariff_type = user_data.get('tariff_type', '–Ω–µ—Ç')
        
        status_text = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if has_subscription else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
        
        if has_subscription and subscription_end:
            end_date = datetime.fromisoformat(subscription_end.replace('Z', '+00:00'))
            subscription_info = f"–¥–æ {end_date.strftime('%d.%m.%Y')} ({days_remaining} –¥–Ω–µ–π)"
        else:
            subscription_info = "–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
        
        return f"""
<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç VAC VPN</b>

üí∞ –ë–∞–ª–∞–Ω—Å: <b>{balance}‚ÇΩ</b>
üìÖ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: <b>{status_text}</b>
üéØ –¢–∞—Ä–∏—Ñ: <b>{tariff_type}</b>
‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: <b>{subscription_info}</b>

üí° –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∫–∞–±–∏–Ω–µ—Ç.
"""
    else:
        error_msg = user_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if user_data else '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'
        return f"""
<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç VAC VPN</b>

‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {error_msg}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
"""

def get_ref_message(user_id: int):
    total_referrals = get_referral_stats(user_id)
    
    return f"""
<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ VAC VPN</b>

–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ:
<code>https://t.me/{BOT_USERNAME}?start=ref_{user_id}</code>

üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: <b>{total_referrals} —á–µ–ª.</b>
‚Ä¢ –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: <b>50‚ÇΩ</b> –Ω–∞ –±–∞–ª–∞–Ω—Å

üí° –ë–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –¥—Ä—É–≥ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É!
"""

def get_support_message():
    return f"""
<b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ VAC VPN</b>

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:

üìû Telegram: {SUPPORT_NICK}
üì¢ –ù–∞—à –∫–∞–Ω–∞–ª: {TG_CHANNEL}

‚è∞ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 —á–∞—Å–æ–≤
"""

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user = message.from_user
    args = message.text.split()
    is_referral = False

    # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ API
    await create_user({
        "user_id": str(user.id),
        "username": user.username or "",
        "first_name": user.first_name or "",
        "last_name": user.last_name or ""
    })

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if len(args) > 1 and args[1].startswith('ref_'):
        try:
            referrer_id = int(args[1][4:])
            referred_id = user.id

            if referred_id != referrer_id:
                add_referral(referrer_id, referred_id)
                is_referral = True
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                try:
                    await bot.send_message(
                        chat_id=referrer_id,
                        text=f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username or '–±–µ–∑ username'} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ."
                    )
                except Exception as e:
                    logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer_id}: {e}")
        except ValueError:
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {args[1]}")

    await message.answer(
        text=get_welcome_message(user.first_name, is_referral),
        reply_markup=get_main_keyboard()
    )

@dp.message(Command("cabinet"))
async def cmd_cabinet(message: types.Message):
    user_id = message.from_user.id
    cabinet_text = await get_cabinet_message(user_id)
    await message.answer(cabinet_text, reply_markup=get_cabinet_keyboard())

@dp.message(Command("referral"))
async def cmd_referral(message: types.Message):
    user_id = message.from_user.id
    await message.answer(get_ref_message(user_id), reply_markup=get_ref_keyboard(user_id))

@dp.message(Command("support"))
async def cmd_support(message: types.Message):
    await message.answer(get_support_message(), reply_markup=get_support_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@dp.message(lambda message: message.text == "üîê –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def cabinet_handler(message: types.Message):
    await cmd_cabinet(message)

@dp.message(lambda message: message.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª–∫–∞")
async def referral_handler(message: types.Message):
    await cmd_referral(message)

@dp.message(lambda message: message.text == "üõ†Ô∏è –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_handler(message: types.Message):
    await cmd_support(message)

@dp.message(lambda message: message.text == "üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def buy_subscription_handler(message: types.Message):
    await message.answer(
        "üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
        "üìÖ <b>–ú–µ—Å—è—á–Ω–∞—è</b> - 299‚ÇΩ\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n"
        "‚Ä¢ –ü–æ–ª–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n\n"
        "üìÖ <b>–ì–æ–¥–æ–≤–∞—è</b> - 2990‚ÇΩ\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –Ω–∞ 365 –¥–Ω–µ–π\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
        "‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è 15%",
        reply_markup=get_tariff_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
@dp.callback_query(lambda c: c.data == "back_to_menu")
async def back_to_menu_handler(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é VAC VPN",
        reply_markup=None
    )
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "refresh_cabinet")
async def refresh_cabinet_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cabinet_text = await get_cabinet_message(user_id)
    await callback.message.edit_text(cabinet_text, reply_markup=get_cabinet_keyboard())
    await callback.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

@dp.callback_query(lambda c: c.data == "refresh_refs")
async def refresh_refs_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    await callback.message.edit_text(get_ref_message(user_id), reply_markup=get_ref_keyboard(user_id))
    await callback.answer("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

@dp.callback_query(lambda c: c.data.startswith("tariff_"))
async def tariff_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    tariff = callback.data.replace("tariff_", "")
    
    tariff_config = {
        "month": {"amount": 299, "name": "–º–µ—Å—è—á–Ω–∞—è"},
        "year": {"amount": 2990, "name": "–≥–æ–¥–æ–≤–∞—è"}
    }
    
    tariff_info = tariff_config.get(tariff)
    if not tariff_info:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ API
    payment_result = await create_payment(user_id, tariff, tariff_info["amount"])
    
    if payment_result and 'error' not in payment_result:
        payment_url = payment_result.get('payment_url')
        payment_id = payment_result.get('payment_id')
        
        await callback.message.edit_text(
            text=f"""
<b>–û–ø–ª–∞—Ç–∞ {tariff_info['name']} –ø–æ–¥–ø–∏—Å–∫–∏</b>

üí≥ –°—É–º–º–∞: <b>{tariff_info['amount']}‚ÇΩ</b>
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {tariff_info['name']} –ø–æ–¥–ø–∏—Å–∫–∞ VAC VPN

1. –ù–∞–∂–º–∏—Ç–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª
2. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa
3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª

‚è≥ –û–±—ã—á–Ω–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç –∑–∞ 1-2 –º–∏–Ω—É—Ç—ã.
""",
            reply_markup=get_payment_keyboard(payment_url, payment_id)
        )
    else:
        error_msg = payment_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if payment_result else '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'
        await callback.message.edit_text(
            text=f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:\n{error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=InlineKeyboardBuilder().add(
                types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            ).as_markup()
        )
    
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("check_payment_"))
async def check_payment_handler(callback: types.CallbackQuery):
    payment_id = callback.data.replace("check_payment_", "")
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ API
    payment_status = await check_payment_status(payment_id, str(user_id))
    
    if payment_status and 'error' not in payment_status:
        status = payment_status.get('status', 'pending')
        
        if status == 'succeeded':
            await callback.message.edit_text(
                text="""
‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>

üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!
üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã.

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN-—Å–µ—Ä–≤–∏—Å.
–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.
""",
                reply_markup=InlineKeyboardBuilder().add(
                    types.InlineKeyboardButton(text="üîê –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="refresh_cabinet")
                ).as_markup()
            )
            
        elif status == 'pending':
            await callback.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.", show_alert=True)
        else:
            await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω.", show_alert=True)
    else:
        error_msg = payment_status.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if payment_status else '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {error_msg}", show_alert=True)
    
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("payment_status_"))
async def payment_status_handler(callback: types.CallbackQuery):
    payment_id = callback.data.replace("payment_status_", "")
    user_id = callback.from_user.id
    
    payment_status = await check_payment_status(payment_id, str(user_id))
    
    if payment_status and 'error' not in payment_status:
        status = payment_status.get('status', 'pending')
        amount = payment_status.get('amount', 0)
        tariff = payment_status.get('tariff', 'unknown')
        
        status_texts = {
            'succeeded': '‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω',
            'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã', 
            'canceled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω',
            'waiting_for_capture': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
        }
        
        status_text = status_texts.get(status, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å')
        
        await callback.answer(
            f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status_text}\n"
            f"–°—É–º–º–∞: {amount}‚ÇΩ\n"
            f"–¢–∞—Ä–∏—Ñ: {tariff}",
            show_alert=True
        )
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("ü§ñ –ë–æ—Ç VAC VPN –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    logger.info(f"üåê API —Å–µ—Ä–≤–µ—Ä: {API_BASE_URL}")
    
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
