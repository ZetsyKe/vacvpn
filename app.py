from fastapi import FastAPI, UploadFile, File, HTTPException, Request, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse, JSONResponse, FileResponse
from fastapi.staticfiles import StaticFiles
import uvicorn
import os
import logging
import json
import asyncio
from datetime import datetime
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="ZetayKe Bot API",
    description="Complete bot application with file processing and management",
    version="2.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
os.makedirs("uploads", exist_ok=True)
os.makedirs("static", exist_ok=True)
os.makedirs("temp", exist_ok=True)

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
if os.path.exists("static") and os.listdir("static"):
    app.mount("/static", StaticFiles(directory="static"), name="static")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bot_status = {
    "is_running": False,
    "last_activity": None,
    "active_tasks": 0,
    "errors": []
}

# =============================================================================
# –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ú–û–î–£–õ–ï–ô
# =============================================================================

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        if os.path.exists("config.json"):
            with open("config.json", "r", encoding="utf-8") as f:
                return json.load(f)
        else:
            logger.warning("config.json not found, using default config")
            return {
                "app_name": "ZetayKe Bot",
                "version": "2.0.0",
                "debug": True
            }
    except Exception as e:
        logger.error(f"Error loading config: {e}")
        return {}

def safe_import_module(module_name, function_names):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        module = __import__(module_name)
        functions = {}
        
        for func_name in function_names:
            if hasattr(module, func_name):
                functions[func_name] = getattr(module, func_name)
            else:
                logger.warning(f"Function {func_name} not found in {module_name}")
                functions[func_name] = None
        
        return {
            "module": module,
            "functions": functions,
            "status": "loaded"
        }
    except ImportError as e:
        logger.warning(f"Module {module_name} import error: {e}")
        return {
            "module": None,
            "functions": {name: None for name in function_names},
            "status": "not_available",
            "error": str(e)
        }
    except Exception as e:
        logger.error(f"Unexpected error importing {module_name}: {e}")
        return {
            "module": None,
            "functions": {name: None for name in function_names},
            "status": "error",
            "error": str(e)
        }

def initialize_modules():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    modules_status = {}
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º bot.py —Å –±–∞–∑–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    bot_functions = ["main", "start_bot", "stop_bot", "process_message", "bot_main"]
    bot_result = safe_import_module("bot", bot_functions)
    modules_status["bot"] = bot_result
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º xray_manager.py —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–π
    xray_functions = ["process_xray", "analyze_image", "generate_report", "process_image", "analyze_xray"]
    xray_result = safe_import_module("xray_manager", xray_functions)
    modules_status["xray_manager"] = xray_result
    
    # –°–æ–∑–¥–∞–µ–º —É–¥–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
    available_functions = {}
    
    # –î–ª—è –±–æ—Ç–∞
    bot_funcs = {}
    for func_name in bot_functions:
        if bot_result["functions"].get(func_name):
            bot_funcs[func_name] = bot_result["functions"][func_name]
    available_functions["bot"] = bot_funcs if bot_funcs else None
    
    # –î–ª—è xray_manager
    xray_funcs = {}
    for func_name in xray_functions:
        if xray_result["functions"].get(func_name):
            xray_funcs[func_name] = xray_result["functions"][func_name]
    available_functions["xray_manager"] = xray_funcs if xray_funcs else None
    
    return {
        "functions": available_functions,
        "status": modules_status
    }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
config = load_config()
modules = initialize_modules()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
def get_bot_function(name):
    func = modules["functions"]["bot"].get(name) if modules["functions"]["bot"] else None
    return func if callable(func) else None

def get_xray_function(name):
    func = modules["functions"]["xray_manager"].get(name) if modules["functions"]["xray_manager"] else None
    return func if callable(func) else None

# =============================================================================
# MIDDLEWARE –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================================================================

@app.middleware("http")
async def log_requests(request: Request, call_next):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    start_time = datetime.now()
    
    response = await call_next(request)
    
    process_time = (datetime.now() - start_time).total_seconds() * 1000
    logger.info(f"{request.method} {request.url.path} - Status: {response.status_code} - {process_time:.2f}ms")
    
    return response

def update_bot_status(is_running: bool = None, error: str = None):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    global bot_status
    if is_running is not None:
        bot_status["is_running"] = is_running
    if error:
        bot_status["errors"].append({
            "timestamp": datetime.now().isoformat(),
            "error": error
        })
        # –î–µ—Ä–∂–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—à–∏–±–æ–∫
        bot_status["errors"] = bot_status["errors"][-10:]
    bot_status["last_activity"] = datetime.now().isoformat()

# =============================================================================
# –û–°–ù–û–í–ù–´–ï –ú–ê–†–®–†–£–¢–´ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
# =============================================================================

@app.get("/", response_class=HTMLResponse)
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>ZetayKe Bot</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
            .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            .status { padding: 10px; margin: 10px 0; border-radius: 5px; }
            .success { background: #d4edda; color: #155724; }
            .warning { background: #fff3cd; color: #856404; }
            .error { background: #f8d7da; color: #721c24; }
            .btn { display: inline-block; padding: 10px 20px; margin: 5px; background: #007bff; color: white; text-decoration: none; border-radius: 5px; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üöÄ ZetayKe Bot API</h1>
            <p>–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ!</p>
            
            <div class="status success">
                <strong>‚úÖ API Status:</strong> ONLINE
            </div>
            
            <div class="status warning">
                <strong>‚ö†Ô∏è Bot Module:</strong> {{ bot_status }}
            </div>
            
            <div class="status warning">
                <strong>‚ö†Ô∏è XRay Module:</strong> {{ xray_status }}
            </div>
            
            <div style="margin-top: 20px;">
                <a href="/docs" class="btn">API Documentation</a>
                <a href="/health" class="btn">Health Check</a>
                <a href="/status" class="btn">System Status</a>
            </div>
        </div>
    </body>
    </html>
    """.replace(
        "{{ bot_status }}", 
        modules["status"]["bot"]["status"]
    ).replace(
        "{{ xray_status }}", 
        modules["status"]["xray_manager"]["status"]
    )

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "service": "ZetayKe Bot API",
        "modules": {
            "bot": modules["status"]["bot"]["status"],
            "xray_manager": modules["status"]["xray_manager"]["status"]
        }
    }

@app.get("/status")
async def system_status():
    """–ü–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    return {
        "status": "operational",
        "timestamp": datetime.now().isoformat(),
        "modules": modules["status"],
        "bot_status": bot_status
    }

# =============================================================================
# –§–ê–ô–õ–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò
# =============================================================================

@app.post("/upload")
async def upload_file(file: UploadFile = File(...)):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞"""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        file_location = f"uploads/{file.filename}"
        with open(file_location, "wb") as buffer:
            content = await file.read()
            buffer.write(content)
        
        logger.info(f"File {file.filename} uploaded successfully")
        
        return {
            "message": "File uploaded successfully",
            "filename": file.filename,
            "size": len(content)
        }
        
    except Exception as e:
        logger.error(f"Upload error: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Upload failed: {str(e)}")

@app.get("/files")
async def list_files():
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    files = []
    if os.path.exists("uploads"):
        for filename in os.listdir("uploads"):
            file_path = os.path.join("uploads", filename)
            if os.path.isfile(file_path):
                stat = os.stat(file_path)
                files.append({
                    "name": filename,
                    "size": stat.st_size,
                    "modified": datetime.fromtimestamp(stat.st_mtime).isoformat()
                })
    
    return {"files": files}

# =============================================================================
# –ë–û–¢ –ú–û–î–£–õ–¨ (—Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π)
# =============================================================================

@app.post("/bot/start")
async def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        if modules["status"]["bot"]["status"] != "loaded":
            raise HTTPException(
                status_code=501, 
                detail=f"Bot module not available: {modules['status']['bot'].get('error', 'Unknown error')}"
            )
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞
        start_func = (get_bot_function("start_bot") or 
                     get_bot_function("main") or 
                     get_bot_function("bot_main"))
        
        if not start_func:
            raise HTTPException(status_code=501, detail="No start function found in bot module")
        
        if bot_status["is_running"]:
            return {"message": "Bot is already running", "status": "running"}
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        import threading
        
        def run_bot():
            try:
                start_func()
                update_bot_status(True)
            except Exception as e:
                update_bot_status(False, f"Bot error: {str(e)}")
                logger.error(f"Bot execution error: {e}")
        
        bot_thread = threading.Thread(target=run_bot, daemon=True)
        bot_thread.start()
        
        update_bot_status(True)
        return {"message": "Bot started successfully", "status": "running"}
        
    except Exception as e:
        error_msg = f"Failed to start bot: {str(e)}"
        logger.error(error_msg)
        raise HTTPException(status_code=500, detail=error_msg)

@app.post("/bot/stop")
async def stop_bot():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
    try:
        stop_func = get_bot_function("stop_bot")
        if stop_func:
            stop_func()
        
        update_bot_status(False)
        return {"message": "Bot stopped successfully", "status": "stopped"}
        
    except Exception as e:
        error_msg = f"Failed to stop bot: {str(e)}"
        logger.error(error_msg)
        raise HTTPException(status_code=500, detail=error_msg)

# =============================================================================
# XRAY –ú–û–î–£–õ–¨ (—Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π)
# =============================================================================

@app.post("/xray/process")
async def process_xray_image(file: UploadFile = File(...)):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ XRay –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        if modules["status"]["xray_manager"]["status"] != "loaded":
            raise HTTPException(
                status_code=501, 
                detail=f"XRay manager not available: {modules['status']['xray_manager'].get('error', 'Unknown error')}"
            )
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        process_func = (get_xray_function("process_xray") or 
                       get_xray_function("process_image") or 
                       get_xray_function("analyze_image") or
                       get_xray_function("analyze_xray"))
        
        if not process_func:
            raise HTTPException(status_code=501, detail="No processing function found in xray_manager")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_path = f"temp/{file.filename}"
        with open(temp_path, "wb") as buffer:
            content = await file.read()
            buffer.write(content)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        result = process_func(temp_path)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(temp_path):
            os.remove(temp_path)
        
        return {
            "status": "success",
            "result": result,
            "filename": file.filename
        }
        
    except Exception as e:
        logger.error(f"XRay processing error: {str(e)}")
        raise HTTPException(status_code=500, detail=f"XRay processing failed: {str(e)}")

# =============================================================================
# –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# =============================================================================

@app.on_event("startup")
async def startup_event():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ ZetayKe Bot API starting up...")
    logger.info(f"üìÅ Working directory: {os.getcwd()}")
    logger.info(f"üîß Loaded modules: {modules['status']}")
    logger.info("‚úÖ Application startup completed")

@app.on_event("shutdown")
async def shutdown_event():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üõë ZetayKe Bot API shutting down...")

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8443))
    uvicorn.run(
        "app:app",
        host="0.0.0.0",
        port=port,
        reload=True
    )
