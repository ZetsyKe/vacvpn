import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder, WebAppInfo
import httpx

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
WEB_APP_URL = "https://vacvpn.vercel.app"
SUPPORT_NICK = "@vacvpn_support"
TG_CHANNEL = "@vac_vpn"
API_BASE_URL = os.getenv("RENDER_EXTERNAL_URL", "https://vacvpn-backend.onrender.com")
BOT_USERNAME = "vaaaac_bot"

if not TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
async def make_api_request(url: str, method: str = "GET", json_data: dict = None, params: dict = None):
    try:
        timeout_config = httpx.Timeout(30.0, connect=10.0)
        async with httpx.AsyncClient(timeout=timeout_config) as client:
            if method.upper() == "GET":
                response = await client.get(url, params=params)
            elif method.upper() == "POST":
                response = await client.post(url, json=json_data)
            else:
                raise ValueError(f"Unsupported method: {method}")
            
            if response.status_code == 200:
                return response.json()
            else:
                logger.error(f"API returned status {response.status_code}")
                return {"error": f"API error: {response.status_code}"}
                
    except Exception as e:
        logger.error(f"API request error: {e}")
        return {"error": f"Connection error: {str(e)}"}

async def get_user_info(user_id: int):
    url = f"{API_BASE_URL}/user-data"
    params = {"user_id": str(user_id)}
    return await make_api_request(url, "GET", params=params)

async def create_user(user_data: dict):
    url = f"{API_BASE_URL}/create-user"
    return await make_api_request(url, "POST", json_data=user_data)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="üîê –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"),
        types.KeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª–∫–∞")
    )
    builder.row(
        types.KeyboardButton(text="üõ†Ô∏è –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞"),
        types.KeyboardButton(text="üåê –í–µ–±-–∫–∞–±–∏–Ω–µ—Ç")
    )
    return builder.as_markup(resize_keyboard=True)

def get_cabinet_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="üì≤ –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∫–∞–±–∏–Ω–µ—Ç",
            web_app=WebAppInfo(url=WEB_APP_URL)
        )
    )
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user = message.from_user

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ API
    await create_user({
        "user_id": str(user.id),
        "username": user.username or "",
        "first_name": user.first_name or "",
        "last_name": user.last_name or ""
    })

    welcome_message = f"""
<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VAC VPN, {user.first_name}!</b>

üöÄ –ü–æ–ª—É—á–∏—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É —Å –Ω–∞—à–µ–π VPN-—Å–ª—É–∂–±–æ–π.

üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</b>
–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–∫–∞–±–∏–Ω–µ—Ç —á–µ—Ä–µ–∑ –º–µ–Ω—é –±–æ—Ç–∞.
"""

    await message.answer(
        text=welcome_message,
        reply_markup=get_main_keyboard()
    )

@dp.message(lambda message: message.text == "üîê –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def cabinet_handler(message: types.Message):
    user_id = message.from_user.id
    user_data = await get_user_info(user_id)
    
    if user_data and 'balance' in user_data:
        balance = user_data.get('balance', 0)
        has_subscription = user_data.get('has_subscription', False)
        status_text = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if has_subscription else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
        
        cabinet_text = f"""
<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç VAC VPN</b>

üí∞ –ë–∞–ª–∞–Ω—Å: <b>{balance}‚ÇΩ</b>
üìÖ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: <b>{status_text}</b>

üí° –î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∫–∞–±–∏–Ω–µ—Ç.
"""
    else:
        cabinet_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    await message.answer(cabinet_text, reply_markup=get_cabinet_keyboard())

@dp.message(lambda message: message.text == "üåê –í–µ–±-–∫–∞–±–∏–Ω–µ—Ç")
async def web_app_handler(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="üì≤ –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∫–∞–±–∏–Ω–µ—Ç",
            web_app=WebAppInfo(url=WEB_APP_URL)
        )
    )
    await message.answer(
        "üåê <b>–í–µ–±-–∫–∞–±–∏–Ω–µ—Ç VAC VPN</b>\n\n"
        "–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–º –æ—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–∫–∞–±–∏–Ω–µ—Ç:",
        reply_markup=builder.as_markup()
    )

@dp.message(lambda message: message.text == "üõ†Ô∏è –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_handler(message: types.Message):
    support_text = f"""
<b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ VAC VPN</b>

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:

üìû Telegram: {SUPPORT_NICK}
üì¢ –ù–∞—à –∫–∞–Ω–∞–ª: {TG_CHANNEL}

‚è∞ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 —á–∞—Å–æ–≤
"""
    await message.answer(support_text)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("ü§ñ –ë–æ—Ç VAC VPN –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    logger.info(f"üåê API —Å–µ—Ä–≤–µ—Ä: {API_BASE_URL}")
    
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
