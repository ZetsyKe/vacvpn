import os
import asyncio
import httpx
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder, WebAppInfo
from dotenv import load_dotenv
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv("backend/key.env")
TOKEN = os.getenv("TOKEN")
WEB_APP_URL = "https://vacvpn.vercel.app"
SUPPORT_NICK = "@vacvpn_support"
TG_CHANNEL = "@vac_vpn"
API_BASE_URL = os.getenv("API_BASE_URL", "https://vacvpn-api-production-d067.up.railway.app")
BOT_USERNAME = "vaaaac_bot"

if not TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ key.env")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = Bot(
    token=TOKEN, 
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
processed_referrals = set()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
async def make_api_request(url: str, method: str = "GET", json_data: dict = None, params: dict = None):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API"""
    try:
        timeout_config = httpx.Timeout(30.0, connect=10.0)
        async with httpx.AsyncClient(timeout=timeout_config) as client:
            if method.upper() == "GET":
                response = await client.get(url, params=params)
            elif method.upper() == "POST":
                response = await client.post(url, json=json_data)
            else:
                raise ValueError(f"Unsupported method: {method}")
            
            if response.status_code == 200:
                return response.json()
            else:
                logger.error(f"API returned status {response.status_code}")
                return {"error": f"API error: {response.status_code}"}
                
    except Exception as e:
        logger.error(f"API request error: {e}")
        return {"error": f"Connection error: {str(e)}"}

async def get_user_info(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ API"""
    url = f"{API_BASE_URL}/user-data"
    params = {"user_id": str(user_id)}
    return await make_api_request(url, "GET", params=params)

async def create_user(user_data: dict):
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API"""
    url = f"{API_BASE_URL}/init-user"
    return await make_api_request(url, "POST", json_data=user_data)

async def add_referral_api(referrer_id: str, referred_id: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞ —á–µ—Ä–µ–∑ API"""
    url = f"{API_BASE_URL}/add-referral"
    return await make_api_request(url, "POST", json_data={
        "referrer_id": referrer_id,
        "referred_id": referred_id
    })

async def update_user_balance(user_id: str, amount: float):
    """–ù–∞—á–∏—Å–ª—è–µ—Ç –±–æ–Ω—É—Å –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API"""
    try:
        url = f"{API_BASE_URL}/update-balance"
        result = await make_api_request(url, "POST", json_data={
            "user_id": user_id,
            "amount": amount
        })
        
        if result and result.get('success'):
            logger.info(f"‚úÖ –ë–æ–Ω—É—Å {amount}‚ÇΩ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
        else:
            error_msg = result.get('error', 'Unknown error') if result else 'No response'
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {error_msg}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        return False

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="üîê –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"),
        types.KeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª–∫–∞")
    )
    builder.row(
        types.KeyboardButton(text="üõ†Ô∏è –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞"),
        types.KeyboardButton(text="üåê –í–µ–±-–∫–∞–±–∏–Ω–µ—Ç")
    )
    return builder.as_markup(resize_keyboard=True)

def get_cabinet_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="üì≤ –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∫–∞–±–∏–Ω–µ—Ç",
            web_app=WebAppInfo(url=WEB_APP_URL)
        )
    )
    builder.row(
        types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_cabinet"),
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    return builder.as_markup()

def get_ref_keyboard(user_id: int):
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="ü§úü§õ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π",
            url=f"https://t.me/share/url?url=https://t.me/{BOT_USERNAME}?start=ref_{user_id}"
        )
    )
    builder.row(
        types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_refs"),
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    return builder.as_markup()

def get_support_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="üìû –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
            url=f"https://t.me/{SUPPORT_NICK[1:]}"
        )
    )
    builder.row(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    return builder.as_markup()

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def get_welcome_message(user_name: str, is_referral: bool = False):
    message = f"""
<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VAC VPN, {user_name}!</b>

üöÄ –ü–æ–ª—É—á–∏—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É —Å –Ω–∞—à–µ–π VPN-—Å–ª—É–∂–±–æ–π.

üìä <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ üîí –ó–∞—â–∏—Ç–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ üåê –û–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
‚Ä¢ üöÄ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
‚Ä¢ üì± –†–∞–±–æ—Ç–∞ –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö

üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</b>
–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–∫–∞–±–∏–Ω–µ—Ç —á–µ—Ä–µ–∑ –º–µ–Ω—é –±–æ—Ç–∞.

üë´ <b>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å!</b>
"""
    if is_referral:
        message += "\nüéâ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ! –ë–æ–Ω—É—Å 50‚ÇΩ —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!"
    
    return message

async def get_cabinet_message(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–±–∏–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ API"""
    user_data = await get_user_info(user_id)
    
    if user_data.get('error'):
        return f"""
<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç VAC VPN</b>

‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {user_data['error']}

üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
"""
    
    balance = user_data.get('balance', 0)
    has_subscription = user_data.get('has_subscription', False)
    subscription_end = user_data.get('subscription_end')
    days_remaining = user_data.get('days_remaining', 0)
    tariff_type = user_data.get('tariff_type', '–Ω–µ—Ç')
    
    status_text = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if has_subscription else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
    
    if has_subscription and subscription_end:
        try:
            from datetime import datetime
            end_date = datetime.fromisoformat(subscription_end.replace('Z', '+00:00'))
            subscription_info = f"–¥–æ {end_date.strftime('%d.%m.%Y')} ({days_remaining} –¥–Ω–µ–π)"
        except:
            subscription_info = "–æ—à–∏–±–∫–∞ –¥–∞—Ç—ã"
    else:
        subscription_info = "–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
    
    return f"""
<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç VAC VPN</b>

üí∞ –ë–∞–ª–∞–Ω—Å: <b>{balance}‚ÇΩ</b>
üìÖ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: <b>{status_text}</b>
üéØ –¢–∞—Ä–∏—Ñ: <b>{tariff_type}</b>
‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: <b>{subscription_info}</b>

üí° –î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∫–∞–±–∏–Ω–µ—Ç.
"""

def get_ref_message(user_id: int):
    return f"""
<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ VAC VPN</b>

–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ:
<code>https://t.me/{BOT_USERNAME}?start=ref_{user_id}</code>

üéÅ <b>–ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:</b>
‚Ä¢ 50‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞
‚Ä¢ –ë–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ

üí° –î–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!
"""

def get_support_message():
    return f"""
<b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ VAC VPN</b>

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:

üìû Telegram: {SUPPORT_NICK}
üì¢ –ù–∞—à –∫–∞–Ω–∞–ª: {TG_CHANNEL}

‚è∞ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 —á–∞—Å–æ–≤
"""

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user = message.from_user
    args = message.text.split()
    is_referral = False

    # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ API
    user_create_result = await create_user({
        "user_id": str(user.id),
        "username": user.username or "",
        "first_name": user.first_name or "",
        "last_name": user.last_name or ""
    })

    logger.info(f"User create result: {user_create_result}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if len(args) > 1 and args[1].startswith('ref_'):
        try:
            referrer_id = args[1][4:]
            referred_id = str(user.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ID
            if not referrer_id.isdigit():
                logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç referrer_id: {referrer_id}")
            elif referred_id == referrer_id:
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é —Å—Å—ã–ª–∫—É")
            else:
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                referral_key = f"{referrer_id}_{referred_id}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                if referral_key not in processed_referrals:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                    processed_referrals.add(referral_key)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤ —Å–∏—Å—Ç–µ–º—É
                    referral_result = await add_referral_api(referrer_id, referred_id)
                    logger.info(f"Referral result: {referral_result}")
                    
                    # –ù–ê–ß–ò–°–õ–Ø–ï–ú –ë–û–ù–£–° 50‚ÇΩ –°–†–ê–ó–£
                    bonus_amount = 50.0
                    bonus_result = await update_user_balance(referrer_id, bonus_amount)
                    
                    if bonus_result:
                        logger.info(f"‚úÖ –ë–æ–Ω—É—Å 50‚ÇΩ –Ω–∞—á–∏—Å–ª–µ–Ω —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referrer_id}")
                        is_referral = True
                        
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω
                        try:
                            await bot.send_message(
                                chat_id=int(referrer_id),
                                text=f"üéâ <b>–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!</b>\n\n"
                                     f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or user.first_name}\n"
                                     f"üí∞ <b>–ë–æ–Ω—É—Å 50‚ÇΩ —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!</b>\n\n"
                                     f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ! üöÄ"
                            )
                            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referrer_id}")
                        except Exception as e:
                            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer_id}: {e}")
                    else:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referrer_id}")
                        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                        processed_referrals.discard(referral_key)
                else:
                    logger.info(f"–†–µ—Ñ–µ—Ä–∞–ª {referral_key} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {e}")

    await message.answer(
        text=get_welcome_message(user.first_name, is_referral),
        reply_markup=get_main_keyboard()
    )

@dp.message(Command("cabinet"))
async def cmd_cabinet(message: types.Message):
    user_id = message.from_user.id
    cabinet_text = await get_cabinet_message(user_id)
    await message.answer(cabinet_text, reply_markup=get_cabinet_keyboard())

@dp.message(Command("referral"))
async def cmd_referral(message: types.Message):
    user_id = message.from_user.id
    await message.answer(get_ref_message(user_id), reply_markup=get_ref_keyboard(user_id))

@dp.message(Command("support"))
async def cmd_support(message: types.Message):
    await message.answer(get_support_message(), reply_markup=get_support_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@dp.message(lambda message: message.text == "üîê –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def cabinet_handler(message: types.Message):
    await cmd_cabinet(message)

@dp.message(lambda message: message.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª–∫–∞")
async def referral_handler(message: types.Message):
    await cmd_referral(message)

@dp.message(lambda message: message.text == "üõ†Ô∏è –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_handler(message: types.Message):
    await cmd_support(message)

@dp.message(lambda message: message.text == "üåê –í–µ–±-–∫–∞–±–∏–Ω–µ—Ç")
async def web_app_handler(message: types.Message):
    user = message.from_user
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="üì≤ –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∫–∞–±–∏–Ω–µ—Ç",
            web_app=WebAppInfo(url=WEB_APP_URL)
        )
    )
    await message.answer(
        f"üåê <b>–í–µ–±-–∫–∞–±–∏–Ω–µ—Ç VAC VPN</b>\n\n"
        f"–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–º –æ—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–∫–∞–±–∏–Ω–µ—Ç:",
        reply_markup=builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
@dp.callback_query(lambda c: c.data == "back_to_menu")
async def back_to_menu_handler(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é VAC VPN",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "refresh_cabinet")
async def refresh_cabinet_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cabinet_text = await get_cabinet_message(user_id)
    
    try:
        await callback.message.edit_text(cabinet_text, reply_markup=get_cabinet_keyboard())
        await callback.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        await callback.message.answer(cabinet_text, reply_markup=get_cabinet_keyboard())
        await callback.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

@dp.callback_query(lambda c: c.data == "refresh_refs")
async def refresh_refs_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    new_ref_message = get_ref_message(user_id)
    
    try:
        await callback.message.edit_text(new_ref_message, reply_markup=get_ref_keyboard(user_id))
        await callback.answer("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        await callback.message.answer(new_ref_message, reply_markup=get_ref_keyboard(user_id))
        await callback.answer("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("ü§ñ –ë–æ—Ç VAC VPN –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    logger.info(f"üåê API —Å–µ—Ä–≤–µ—Ä: {API_BASE_URL}")
    
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
