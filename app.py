import os
import asyncio
import httpx
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder, WebAppInfo
from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
import uuid
from datetime import datetime, timedelta
from pydantic import BaseModel
import firebase_admin
from firebase_admin import credentials, db as firebase_db
import json
import sqlite3
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI(title="VAC VPN API")

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
WEB_APP_URL = "https://vacvpn.vercel.app"
SUPPORT_NICK = "@vacvpn_support"
TG_CHANNEL = "@vac_vpn"
API_BASE_URL = os.getenv("RENDER_EXTERNAL_URL", "")

if not API_BASE_URL:
    API_BASE_URL = "https://vacvpn-backend.onrender.com"

BOT_USERNAME = "vaaaac_bot"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
try:
    firebase_cred = os.getenv("FIREBASE_CREDENTIALS")
    if firebase_cred:
        cred_dict = json.loads(firebase_cred)
        cred = credentials.Certificate(cred_dict)
        firebase_admin.initialize_app(cred, {
            'databaseURL': 'https://vacvpn-75yegf-default-rtdb.firebaseio.com/'
        })
        logger.info("‚úÖ Firebase Realtime Database –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    else:
        logger.warning("‚ùå FIREBASE_CREDENTIALS not found")
except Exception as e:
    logger.error(f"‚ùå Firebase initialization error: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
if TOKEN:
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()
else:
    logger.error("‚ùå TOKEN not found")
    bot = None
    dp = None

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class PaymentRequest(BaseModel):
    user_id: str
    amount: float
    tariff: str = "month"
    description: str = ""
    payment_type: str = "tariff"

class UserCreateRequest(BaseModel):
    user_id: str
    username: str = ""
    first_name: str = ""
    last_name: str = ""

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
def init_db():
    try:
        conn = sqlite3.connect('vacvpn.db')
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS referrals (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                referrer_id INTEGER,
                referred_id INTEGER,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                bonus_paid BOOLEAN DEFAULT FALSE
            )
        ''')
        conn.commit()
        conn.close()
        logger.info("‚úÖ SQLite database initialized")
    except Exception as e:
        logger.error(f"‚ùå Error initializing database: {e}")

init_db()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏
def add_referral(referrer_id: int, referred_id: int):
    try:
        conn = sqlite3.connect('vacvpn.db')
        cursor = conn.cursor()
        
        cursor.execute('SELECT id FROM referrals WHERE referrer_id = ? AND referred_id = ?', 
                      (referrer_id, referred_id))
        existing = cursor.fetchone()
        
        if not existing:
            cursor.execute('INSERT INTO referrals (referrer_id, referred_id, created_at) VALUES (?, ?, ?)',
                          (referrer_id, referred_id, datetime.now().isoformat()))
            conn.commit()
            logger.info(f"‚úÖ –†–µ—Ñ–µ—Ä–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω: {referrer_id} -> {referred_id}")
        
        conn.close()
    except Exception as e:
        logger.error(f"‚ùå Error adding referral: {e}")

def get_referral_stats(user_id: int):
    try:
        conn = sqlite3.connect('vacvpn.db')
        cursor = conn.cursor()
        
        cursor.execute('SELECT COUNT(*) FROM referrals WHERE referrer_id = ?', (user_id,))
        total = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM referrals WHERE referrer_id = ? AND bonus_paid = ?', (user_id, True))
        with_bonus = cursor.fetchone()[0]
        
        conn.close()
        return total, with_bonus
    except Exception as e:
        logger.error(f"‚ùå Error getting referral stats: {e}")
        return 0, 0

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å Firebase
def get_user(user_id: str):
    try:
        ref = firebase_db.reference(f'users/{user_id}')
        user_data = ref.get()
        return user_data
    except Exception as e:
        logger.error(f"‚ùå Error getting user from Firebase: {e}")
        return None

def create_user_in_firebase(user_data: UserCreateRequest):
    try:
        ref = firebase_db.reference(f'users/{user_data.user_id}')
        
        existing_user = ref.get()
        if not existing_user:
            user_data_dict = {
                'user_id': str(user_data.user_id),
                'username': user_data.username,
                'first_name': user_data.first_name,
                'last_name': user_data.last_name,
                'balance': 0.0,
                'has_subscription': False,
                'subscription_end': None,
                'tariff_type': 'none',
                'created_at': datetime.now().isoformat(),
                'updated_at': datetime.now().isoformat()
            }
            ref.set(user_data_dict)
            logger.info(f"‚úÖ User created in Firebase: {user_data.user_id}")
        else:
            logger.info(f"‚ÑπÔ∏è User already exists in Firebase: {user_data.user_id}")
            
        return True
    except Exception as e:
        logger.error(f"‚ùå Error creating user in Firebase: {e}")
        return False

def update_user_balance(user_id: str, amount: float):
    try:
        ref = firebase_db.reference(f'users/{user_id}')
        user_data = ref.get()
        
        if user_data:
            current_balance = user_data.get('balance', 0)
            new_balance = current_balance + amount
            
            ref.update({
                'balance': new_balance,
                'updated_at': datetime.now().isoformat()
            })
            logger.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {user_id} {current_balance} -> {new_balance}")
            return True
        else:
            create_user_in_firebase(UserCreateRequest(
                user_id=user_id,
                username="",
                first_name="",
                last_name=""
            ))
            return update_user_balance(user_id, amount)
    except Exception as e:
        logger.error(f"‚ùå Error updating user balance in Firebase: {e}")
        return False

def activate_subscription(user_id: str, tariff: str, days: int):
    try:
        ref = firebase_db.reference(f'users/{user_id}')
        user_data = ref.get()
        
        if not user_data:
            create_user_in_firebase(UserCreateRequest(
                user_id=user_id,
                username="",
                first_name="",
                last_name=""
            ))
            user_data = {}
        
        now = datetime.now()
        
        if user_data.get('has_subscription') and user_data.get('subscription_end'):
            current_end_str = user_data['subscription_end']
            try:
                current_end = datetime.fromisoformat(current_end_str.replace('Z', '+00:00'))
                if current_end > now:
                    new_end = current_end + timedelta(days=days)
                else:
                    new_end = now + timedelta(days=days)
            except:
                new_end = now + timedelta(days=days)
        else:
            new_end = now + timedelta(days=days)
        
        ref.update({
            'has_subscription': True,
            'subscription_end': new_end.isoformat(),
            'tariff_type': tariff,
            'updated_at': datetime.now().isoformat()
        })
        
        logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: {user_id} –Ω–∞ {days} –¥–Ω–µ–π")
        return new_end
    except Exception as e:
        logger.error(f"‚ùå Error activating subscription in Firebase: {e}")
        return None

def save_payment(payment_data: dict):
    try:
        payment_id = payment_data['payment_id']
        ref = firebase_db.reference(f'payments/{payment_id}')
        payment_data['created_at'] = datetime.now().isoformat()
        ref.set(payment_data)
        return True
    except Exception as e:
        logger.error(f"‚ùå Error saving payment to Firebase: {e}")
        return False

def update_payment_status(payment_id: str, status: str, yookassa_id: str = None):
    try:
        ref = firebase_db.reference(f'payments/{payment_id}')
        update_data = {
            'status': status,
            'updated_at': datetime.now().isoformat()
        }
        
        if yookassa_id:
            update_data['yookassa_id'] = yookassa_id
            
        if status == 'succeeded':
            update_data['confirmed_at'] = datetime.now().isoformat()
            
        ref.update(update_data)
        return True
    except Exception as e:
        logger.error(f"‚ùå Error updating payment status in Firebase: {e}")
        return False

def get_payment(payment_id: str):
    try:
        ref = firebase_db.reference(f'payments/{payment_id}')
        payment = ref.get()
        return payment
    except Exception as e:
        logger.error(f"‚ùå Error getting payment from Firebase: {e}")
        return None

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±–æ—Ç–∞
def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="üîê –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"),
        types.KeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª–∫–∞")
    )
    builder.row(
        types.KeyboardButton(text="üõ†Ô∏è –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞"),
        types.KeyboardButton(text="üåê –í–µ–±-–∫–∞–±–∏–Ω–µ—Ç")
    )
    return builder.as_markup(resize_keyboard=True)

def get_cabinet_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="üì≤ –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∫–∞–±–∏–Ω–µ—Ç",
            web_app=WebAppInfo(url=WEB_APP_URL)
        )
    )
    builder.row(
        types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_cabinet"),
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    return builder.as_markup()

def get_ref_keyboard(user_id: int):
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="ü§úü§õ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π",
            url=f"https://t.me/share/url?url=https://t.me/{BOT_USERNAME}?start=ref_{user_id}"
        )
    )
    builder.row(
        types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_refs"),
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞ (–µ—Å–ª–∏ –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω)
if bot and dp:
    @dp.message(Command("start"))
    async def cmd_start(message: types.Message):
        user = message.from_user
        args = message.text.split()
        is_referral = False

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firebase
        create_user_in_firebase(UserCreateRequest(
            user_id=str(user.id),
            username=user.username or "",
            first_name=user.first_name or "",
            last_name=user.last_name or ""
        ))

        if len(args) > 1 and args[1].startswith('ref_'):
            try:
                referrer_id = int(args[1][4:])
                referred_id = user.id

                if referred_id != referrer_id:
                    add_referral(referrer_id, referred_id)
                    is_referral = True
                    
                    try:
                        await bot.send_message(
                            chat_id=referrer_id,
                            text=f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username or '–±–µ–∑ username'} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ.\n–ë–æ–Ω—É—Å 50‚ÇΩ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏."
                        )
                    except Exception as e:
                        logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer_id}: {e}")
            except ValueError:
                logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {args[1]}")

        welcome_message = f"""
<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VAC VPN, {user.first_name}!</b>

üöÄ –ü–æ–ª—É—á–∏—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É —Å –Ω–∞—à–µ–π VPN-—Å–ª—É–∂–±–æ–π.
        """
        
        if is_referral:
            welcome_message += "\nüéâ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ! –ë–æ–Ω—É—Å –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏."

        await message.answer(
            text=welcome_message,
            reply_markup=get_main_keyboard()
        )

    @dp.message(Command("cabinet"))
    async def cmd_cabinet(message: types.Message):
        user_id = message.from_user.id
        try:
            user_data = get_user(str(user_id))
            if user_data:
                balance = user_data.get('balance', 0)
                has_subscription = user_data.get('has_subscription', False)
                status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if has_subscription else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
                
                message_text = f"""
<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç VAC VPN</b>

üí∞ –ë–∞–ª–∞–Ω—Å: <b>{balance}‚ÇΩ</b>
üìÖ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: <b>{status}</b>

üí° –î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∫–∞–±–∏–Ω–µ—Ç.
"""
            else:
                message_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                
            await message.answer(message_text, reply_markup=get_cabinet_keyboard())
        except Exception as e:
            logger.error(f"Error in cabinet command: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_cabinet_keyboard())

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    async def run_bot():
        logger.info("ü§ñ –ë–æ—Ç VAC VPN –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        try:
            await dp.start_polling(bot)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã FastAPI
@app.get("/")
async def health_check():
    return {
        "status": "ok", 
        "message": "VAC VPN API is running", 
        "api_base_url": API_BASE_URL,
        "timestamp": datetime.now().isoformat()
    }

@app.get("/user-data")
async def get_user_info_endpoint(user_id: str):
    try:
        user = get_user(user_id)
        
        if not user:
            create_user_in_firebase(UserCreateRequest(
                user_id=user_id,
                username="",
                first_name="",
                last_name=""
            ))
            user = get_user(user_id)
        
        if not user:
            return {
                "user_id": user_id,
                "balance": 0,
                "has_subscription": False,
                "subscription_end": None,
                "tariff_type": "none",
                "days_remaining": 0
            }
        
        has_subscription = user.get('has_subscription', False)
        subscription_end = user.get('subscription_end')
        days_remaining = 0
        
        if has_subscription and subscription_end:
            try:
                end_date = datetime.fromisoformat(subscription_end.replace('Z', '+00:00'))
                if end_date > datetime.now():
                    days_remaining = (end_date - datetime.now()).days
                else:
                    ref = firebase_db.reference(f'users/{user_id}')
                    ref.update({
                        'has_subscription': False,
                        'updated_at': datetime.now().isoformat()
                    })
                    has_subscription = False
            except:
                has_subscription = False
        
        return {
            "user_id": user_id,
            "balance": user.get('balance', 0),
            "has_subscription": has_subscription,
            "subscription_end": subscription_end,
            "tariff_type": user.get('tariff_type', 'none'),
            "days_remaining": days_remaining
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error in get_user_info: {e}")
        return {
            "user_id": user_id,
            "balance": 0,
            "has_subscription": False,
            "subscription_end": None,
            "tariff_type": "none",
            "days_remaining": 0
        }

@app.post("/create-user")
async def create_user_endpoint(request: UserCreateRequest):
    try:
        success = create_user_in_firebase(request)
        return {"success": True, "user_id": request.user_id}
    except Exception as e:
        logger.error(f"‚ùå Error in create-user: {e}")
        return {"success": False, "error": str(e)}

@app.post("/create-payment")
async def create_payment(request: PaymentRequest):
    try:
        SHOP_ID = os.getenv("SHOP_ID")
        API_KEY = os.getenv("API_KEY")
        
        if not SHOP_ID or not API_KEY:
            return {"error": "Payment gateway not configured"}
        
        logger.info(f"üîÑ Creating payment for user {request.user_id}, amount: {request.amount}, tariff: {request.tariff}")
        
        is_test_payment = request.amount <= 2.00
        
        payment_id = str(uuid.uuid4())
        
        payment_data = {
            "payment_id": payment_id,
            "user_id": request.user_id,
            "amount": request.amount,
            "tariff": request.tariff,
            "payment_type": request.payment_type,
            "status": "pending",
            "description": request.description,
            "is_test": is_test_payment
        }
        save_payment(payment_data)
        
        if is_test_payment:
            logger.info(f"‚úÖ Test payment auto-confirmed: {payment_id}")
            
            if request.payment_type == 'tariff':
                tariff_days = 30 if request.tariff == "month" else 365
                activate_subscription(request.user_id, request.tariff, tariff_days)
            else:
                update_user_balance(request.user_id, request.amount)
            
            update_payment_status(payment_id, 'succeeded', 'test_payment')
            
            return {
                "success": True,
                "payment_id": payment_id,
                "payment_url": "https://t.me/vaaaac_bot",
                "amount": request.amount,
                "status": "succeeded"
            }
        
        # –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        return {
            "success": False,
            "error": "Real payments temporarily disabled"
        }
            
    except Exception as e:
        error_msg = f"Server error: {str(e)}"
        logger.error(f"‚ùå {error_msg}")
        return {"error": error_msg}

@app.get("/check-payment")
async def check_payment(payment_id: str, user_id: str):
    try:
        logger.info(f"üîÑ Checking payment: {payment_id} for user: {user_id}")
        
        payment = get_payment(payment_id)
        if not payment:
            return {"error": "Payment not found"}
        
        if payment.get('is_test') or payment.get('status') == 'succeeded':
            return {
                "success": True,
                "status": "succeeded",
                "payment_id": payment_id,
                "amount": payment.get('amount'),
                "payment_type": payment.get('payment_type', 'tariff')
            }
        
        return {
            "success": True,
            "status": payment.get('status', 'pending'),
            "payment_id": payment_id
        }
        
    except Exception as e:
        error_msg = f"Error checking payment: {str(e)}"
        logger.error(f"‚ùå {error_msg}")
        return {"error": error_msg}

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.on_event("startup")
async def startup_event():
    logger.info("üöÄ Starting VAC VPN API...")
    logger.info(f"üåê API Base URL: {API_BASE_URL}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
    if TOKEN and bot:
        asyncio.create_task(run_bot())

if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("PORT", 10000))
    uvicorn.run(app, host="0.0.0.0", port=port)
