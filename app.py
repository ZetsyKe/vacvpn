from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse, FileResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
import uvicorn
import os
import logging
import asyncio
from datetime import datetime, timedelta
import threading
import subprocess
import sys
import uuid
import httpx
import firebase_admin
from firebase_admin import credentials, firestore
from pydantic import BaseModel
import re
import json
import urllib.parse
from typing import List, Optional
from PIL import Image, ImageDraw, ImageFont
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="VAC VPN API",
    description="Complete VAC VPN Service with API and Web Interface",
    version="1.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
os.makedirs("static", exist_ok=True)
app.mount("/static", StaticFiles(directory="static"), name="static")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
XRAY_SERVERS = {
    "moscow": {
        "url": "http://localhost:8003",  # –õ–æ–∫–∞–ª—å–Ω—ã–π –Ω–∞ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–µ
        "api_key": "moscow_api_key_here",
        "display_name": "üá∑üá∫ –ú–æ—Å–∫–≤–∞ #1"
    },
    "finland": {
        "url": "http://91.103.140.230:8003",  # –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –¢–í–û–ô IP!
        "api_key": "wzl-GFlbAljj80hA_rxB0ZZm-BSStbSQFgV_orpmn0I",
        "display_name": "üá´üáÆ –§–∏–Ω–ª—è–Ω–¥–∏—è #1"
    }
}

VLESS_SERVERS = [
    {
        "id": "moscow",
        "name": "üá∑üá∫ –ú–æ—Å–∫–≤–∞ #1",
        "address": "45.134.13.189", 
        "port": 2053,
        "sni": "www.google.com",
        "reality_pbk": "AZIvYvIEtJv5aA5-F-6gMg3a6KXuMgRJIHBLdp-7bAQ",
        "short_id": "abcd1234",
        "flow": "",
        "security": "reality",
        "xray_server": "moscow"
    },
    {
        "id": "finland", 
        "name": "üá´üáÆ –§–∏–Ω–ª—è–Ω–¥–∏—è #1", 
        "address": "91.103.140.230",
        "port": 2053,
        "sni": "www.google.com",
        "reality_pbk": "RiEEU2vtCrHqkR2wU8PexxXJQ2DGvRIbo3VmeBfVdXw",
        "short_id": "abcd1234",
        "flow": "",
        "security": "reality",
        "xray_server": "finland"
    }
]

# –¢–∞—Ä–∏—Ñ—ã
TARIFFS = {
    "1month": {
        "name": "1 –ú–µ—Å—è—Ü",
        "price": 150.0,
        "days": 30
    },
    "1year": {
        "name": "1 –ì–æ–¥",
        "price": 1300.0,
        "days": 365
    }
}

# –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
REFERRAL_BONUS_REFERRER = 50.0
REFERRAL_BONUS_REFERRED = 100.0

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
try:
    if not firebase_admin._apps:
        logger.info("üöÄ Initializing Firebase for Railway")
        
        firebase_config = {
            "type": "service_account",
            "project_id": os.getenv("FIREBASE_PROJECT_ID"),
            "private_key_id": os.getenv("FIREBASE_PRIVATE_KEY_ID"),
            "private_key": os.getenv("FIREBASE_PRIVATE_KEY", "").replace('\\n', '\n'),
            "client_email": os.getenv("FIREBASE_CLIENT_EMAIL"),
            "client_id": os.getenv("FIREBASE_CLIENT_ID"),
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token",
            "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
            "client_x509_cert_url": os.getenv("FIREBASE_CLIENT_X509_CERT_URL"),
            "universe_domain": "googleapis.com"
        }
        
        required_fields = ["project_id", "private_key", "client_email"]
        for field in required_fields:
            if not firebase_config.get(field):
                raise ValueError(f"Missing required Firebase config field: {field}")
        
        cred = credentials.Certificate(firebase_config)
        firebase_admin.initialize_app(cred)
    
    db = firestore.client()
    logger.info("‚úÖ Firebase initialized successfully")
    
except Exception as e:
    logger.error(f"‚ùå Firebase initialization failed: {str(e)}")
    db = None

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class PaymentRequest(BaseModel):
    user_id: str
    amount: float
    tariff: str = "1month"
    payment_type: str = "tariff"

class ActivateTariffRequest(BaseModel):
    user_id: str
    tariff: str
    payment_method: str = "yookassa"
    selected_server: str = None  # –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞

class AddBalanceRequest(BaseModel):
    user_id: str
    amount: float
    payment_method: str = "yookassa"

class InitUserRequest(BaseModel):
    user_id: str
    username: str = ""
    first_name: str = ""
    last_name: str = ""
    start_param: str = None

class VlessConfigRequest(BaseModel):
    user_id: str
    server_id: str = None  # ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞

class BuyWithBalanceRequest(BaseModel):
    user_id: str
    tariff_id: str
    tariff_price: float
    tariff_days: int
    selected_server: str = None  # –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞

def ensure_logo_exists():
    """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —á—Ç–æ –ª–æ–≥–æ—Ç–∏–ø –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    try:
        original_logo = "Airbrush-Image-Enhancer-1753455007914.png"
        static_logo = "static/Airbrush-Image-Enhancer-1753455007914.png"
        
        # –°–æ–∑–¥–∞–µ–º static –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
        os.makedirs("static", exist_ok=True)
        
        # –ï—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥–æ—Ç–∏–ø —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∫–æ–ø–∏—Ä—É–µ–º –µ–≥–æ –≤ static
        if os.path.exists(original_logo) and not os.path.exists(static_logo):
            import shutil
            shutil.copy2(original_logo, static_logo)
            logger.info(f"‚úÖ Logo copied to static directory: {static_logo}")
        elif os.path.exists(static_logo):
            logger.info(f"‚úÖ Logo already exists in static directory: {static_logo}")
        else:
            logger.warning("‚ö†Ô∏è Original logo file not found, creating placeholder")
            create_placeholder_logo()
            
    except Exception as e:
        logger.error(f"‚ùå Error ensuring logo exists: {e}")
        create_placeholder_logo()

def create_placeholder_logo():
    """–°–æ–∑–¥–∞–µ—Ç placeholder –ª–æ–≥–æ—Ç–∏–ø –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω"""
    try:
        logo_path = "static/Airbrush-Image-Enhancer-1753455007914.png"
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 120x120
        img = Image.new('RGB', (120, 120), color='#121212')
        d = ImageDraw.Draw(img)
        
        # –†–∏—Å—É–µ–º –∑–µ–ª–µ–Ω—ã–π –∫—Ä—É–≥
        d.ellipse([10, 10, 110, 110], fill='#B0CB1F')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç VAC VPN
        try:
            # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
            font = ImageFont.truetype("arial.ttf", 16)
        except:
            try:
                font = ImageFont.truetype("arialbd.ttf", 16)
            except:
                # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç
                font = ImageFont.load_default()
        
        # –¢–µ–∫—Å—Ç –±–µ–ª—ã–º —Ü–≤–µ—Ç–æ–º
        d.text((60, 40), "VAC", fill='#121212', font=font, anchor="mm")
        d.text((60, 70), "VPN", fill='#121212', font=font, anchor="mm")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img.save(logo_path, "PNG")
        logger.info("‚úÖ Placeholder logo created successfully")
        
    except Exception as e:
        logger.error(f"‚ùå Error creating placeholder logo: {e}")

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å Xray —á–µ—Ä–µ–∑ API
async def check_user_in_xray(user_uuid: str, server_id: str = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ Xray –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ"""
    try:
        logger.info(f"üîç [XRAY CHECK] Starting check for UUID: {user_uuid} on server: {server_id}")
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
        if server_id and server_id in XRAY_SERVERS:
            server_config = XRAY_SERVERS[server_id]
            try:
                async with httpx.AsyncClient() as client:
                    response = await client.get(
                        f"{server_config['url']}/users/{user_uuid}",
                        headers={"X-API-Key": server_config['api_key']},
                        timeout=30.0
                    )
                    
                    if response.status_code == 200:
                        data = response.json()
                        exists = data.get("exists", False)
                        logger.info(f"‚úÖ [XRAY CHECK] User exists in {server_id}: {exists}")
                        return exists
                    else:
                        logger.warning(f"‚ö†Ô∏è [XRAY CHECK] Server {server_id} returned {response.status_code}")
                        return False
                        
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [XRAY CHECK] Server {server_id} error: {e}")
                return False
        
        # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã
        for server_name, server_config in XRAY_SERVERS.items():
            try:
                async with httpx.AsyncClient() as client:
                    response = await client.get(
                        f"{server_config['url']}/users/{user_uuid}",
                        headers={"X-API-Key": server_config["api_key"]},
                        timeout=30.0
                    )
                    
                    if response.status_code == 200:
                        data = response.json()
                        exists = data.get("exists", False)
                        if exists:
                            logger.info(f"‚úÖ [XRAY CHECK] User exists in {server_name} Xray: {exists}")
                            return True
                        else:
                            logger.info(f"‚ùå [XRAY CHECK] User NOT found in {server_name}")
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [XRAY CHECK] Server {server_name} error: {e}")
        
        logger.error(f"‚ùå [XRAY CHECK] User not found in any Xray server: {user_uuid}")
        return False
            
    except Exception as e:
        logger.error(f"‚ùå [XRAY CHECK] Exception: {str(e)}")
        return False

async def add_user_to_xray(user_uuid: str, server_id: str = None) -> bool:
    """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Xray —Å–µ—Ä–≤–µ—Ä(—ã)"""
    try:
        logger.info(f"üîÑ [XRAY ADD] Starting to add user: {user_uuid} to server: {server_id}")
        
        success_count = 0
        servers_to_process = []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤ –∫–∞–∫–∏–µ —Å–µ—Ä–≤–µ—Ä—ã –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if server_id and server_id in XRAY_SERVERS:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
            servers_to_process = [(server_id, XRAY_SERVERS[server_id])]
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã
            servers_to_process = list(XRAY_SERVERS.items())
        
        total_servers = len(servers_to_process)
        
        for server_name, server_config in servers_to_process:
            try:
                async with httpx.AsyncClient() as client:
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoint'—ã
                    endpoints = [
                        f"{server_config['url']}/user",
                        f"{server_config['url']}/users"
                    ]
                    
                    server_success = False
                    for endpoint in endpoints:
                        try:
                            logger.info(f"üåê [XRAY ADD] Adding to {server_name} via: {endpoint}")
                            
                            payload = {
                                "uuid": user_uuid,
                                "email": f"user_{user_uuid}@{server_name}.vacvpn.com"
                            }
                            
                            response = await client.post(
                                endpoint,
                                headers={"X-API-Key": server_config["api_key"]},
                                json=payload,
                                timeout=30.0
                            )
                            
                            logger.info(f"üì° [XRAY ADD] {server_name} response: {response.status_code} - {response.text}")
                            
                            if response.status_code in [200, 201]:
                                data = response.json()
                                status = data.get("status", "")
                                message = data.get("message", "")
                                
                                if status == "success" or "user added" in message.lower():
                                    logger.info(f"‚úÖ [XRAY ADD] User successfully added to {server_name}")
                                    server_success = True
                                    break
                                elif "already exists" in message.lower():
                                    logger.info(f"‚úÖ [XRAY ADD] User already exists in {server_name}")
                                    server_success = True
                                    break
                                else:
                                    logger.info(f"‚ö†Ô∏è [XRAY ADD] {server_name} unexpected response: {data}")
                            
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è [XRAY ADD] {server_name} endpoint {endpoint} error: {e}")
                    
                    if server_success:
                        success_count += 1
                        logger.info(f"‚úÖ [XRAY ADD] Successfully added to {server_name}")
                    else:
                        logger.warning(f"‚ùå [XRAY ADD] Failed to add to {server_name}")
                            
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [XRAY ADD] Server {server_name} error: {e}")
        
        # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª–∏ —Ö–æ—Ç—è –±—ã –≤ –æ–¥–∏–Ω —Å–µ—Ä–≤–µ—Ä
        final_success = success_count > 0
        logger.info(f"üìä [XRAY ADD] Final result: {final_success} ({success_count}/{total_servers} servers)")
        
        return final_success
            
    except Exception as e:
        logger.error(f"‚ùå [XRAY ADD] Exception: {str(e)}")
        return False

async def get_xray_users_count(server_id: str = None) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Xray"""
    try:
        count = 0
        servers_to_check = []
        
        if server_id and server_id in XRAY_SERVERS:
            servers_to_check = [(server_id, XRAY_SERVERS[server_id])]
        else:
            servers_to_check = list(XRAY_SERVERS.items())
        
        for server_name, server_config in servers_to_check:
            try:
                async with httpx.AsyncClient() as client:
                    response = await client.get(
                        f"{server_config['url']}/users",
                        headers={"X-API-Key": server_config["api_key"]},
                        timeout=30.0
                    )
                    
                    if response.status_code == 200:
                        data = response.json()
                        users = data.get("users", [])
                        count += len(users)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Error getting users from {server_name}: {e}")
        
        return count
            
    except Exception as e:
        logger.error(f"‚ùå Error getting Xray users: {e}")
        return 0

async def remove_user_from_xray(user_uuid: str, server_id: str = None) -> bool:
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Xray —á–µ—Ä–µ–∑ API"""
    try:
        success_count = 0
        servers_to_process = []
        
        if server_id and server_id in XRAY_SERVERS:
            servers_to_process = [(server_id, XRAY_SERVERS[server_id])]
        else:
            servers_to_process = list(XRAY_SERVERS.items())
        
        for server_name, server_config in servers_to_process:
            try:
                async with httpx.AsyncClient() as client:
                    response = await client.delete(
                        f"{server_config['url']}/users/{user_uuid}",
                        headers={"X-API-Key": server_config["api_key"]},
                        timeout=30.0
                    )
                    
                    if response.status_code == 200:
                        logger.info(f"‚úÖ User {user_uuid} removed from {server_name} Xray")
                        success_count += 1
                    else:
                        logger.error(f"‚ùå Failed to remove user from {server_name} Xray: {response.status_code}")
                        
            except Exception as e:
                logger.error(f"‚ùå Error removing user from {server_name} Xray: {e}")
        
        return success_count > 0
                
    except Exception as e:
        logger.error(f"‚ùå Error removing user from Xray via API: {e}")
        return False

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å Firebase
def get_user(user_id: str):
    if not db: 
        logger.error("‚ùå Database not connected")
        return None
    try:
        doc = db.collection('users').document(user_id).get()
        return doc.to_dict() if doc.exists else None
    except Exception as e:
        logger.error(f"‚ùå Error getting user: {e}")
        return None

def update_user_balance(user_id: str, amount: float):
    if not db: 
        logger.error("‚ùå Database not connected")
        return False
    try:
        user_ref = db.collection('users').document(user_id)
        user = user_ref.get()
        
        if user.exists:
            user_data = user.to_dict()
            current_balance = user_data.get('balance', 0.0)
            new_balance = current_balance + amount
            
            user_ref.update({
                'balance': new_balance,
                'updated_at': firestore.SERVER_TIMESTAMP
            })
            
            logger.info(f"üí∞ Balance updated for user {user_id}: {current_balance} -> {new_balance} ({'+' if amount > 0 else ''}{amount}‚ÇΩ)")
            return True
        else:
            logger.error(f"‚ùå User {user_id} not found")
            return False
    except Exception as e:
        logger.error(f"‚ùå Error updating balance: {e}")
        return False

def generate_user_uuid():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ UUID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return str(uuid.uuid4())

async def ensure_user_uuid(user_id: str, server_id: str = None) -> str:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å UUID –∏ –æ–Ω –≤ Xray"""
    if not db:
        raise Exception("Database not connected")
    
    try:
        user_ref = db.collection('users').document(user_id)
        user = user_ref.get()
        
        if not user.exists:
            raise Exception("User not found")
        
        user_data = user.to_dict()
        vless_uuid = user_data.get('vless_uuid')
        
        # –ï—Å–ª–∏ UUID —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –≤ Xray
        if vless_uuid:
            logger.info(f"üîç User {user_id} has existing UUID: {vless_uuid}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ Xray –Ω–∞ –Ω—É–∂–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
            if not await check_user_in_xray(vless_uuid, server_id):
                logger.warning(f"‚ö†Ô∏è UUID exists but not in Xray, re-adding to server: {server_id}")
                success = await add_user_to_xray(vless_uuid, server_id)
                if not success:
                    raise Exception(f"Failed to add existing UUID to Xray server: {server_id}")
            
            return vless_uuid
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π UUID
        new_uuid = generate_user_uuid()
        logger.info(f"üÜï Generating new UUID for user {user_id}: {new_uuid}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_ref.update({
            'vless_uuid': new_uuid,
            'updated_at': firestore.SERVER_TIMESTAMP
        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ Xray
        success = await add_user_to_xray(new_uuid, server_id)
        if not success:
            raise Exception(f"Failed to add new UUID to Xray server: {server_id}")
        
        logger.info(f"‚úÖ New UUID created and added to Xray server {server_id}: {new_uuid}")
        return new_uuid
        
    except Exception as e:
        logger.error(f"‚ùå Error ensuring user UUID: {e}")
        raise

def add_referral_bonus_immediately(referrer_id: str, referred_id: str):
    if not db: 
        logger.error("‚ùå Database not connected")
        return False
    
    try:
        logger.info(f"üí∞ Immediate referral bonuses: referrer {referrer_id} gets 50‚ÇΩ, referred {referred_id} gets 100‚ÇΩ")
        
        update_user_balance(referrer_id, 50.0)
        update_user_balance(referred_id, 100.0)
        
        referral_id = f"{referrer_id}_{referred_id}"
        db.collection('referrals').document(referral_id).set({
            'referrer_id': referrer_id,
            'referred_id': referred_id,
            'referrer_bonus': 50.0,
            'referred_bonus': 100.0,
            'bonus_paid': True,
            'created_at': firestore.SERVER_TIMESTAMP
        })
        
        logger.info(f"‚úÖ Immediate referral bonuses applied: {referrer_id} +50‚ÇΩ, {referred_id} +100‚ÇΩ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error adding immediate referral bonus: {e}")
        return False

def create_user_vless_configs(user_id: str, vless_uuid: str, server_id: str = None) -> List[dict]:
    """–°–æ–∑–¥–∞–µ—Ç VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    configs = []
    servers_to_process = []
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Å–µ—Ä–≤–µ—Ä—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
    if server_id:
        # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –ø–æ ID
        for server in VLESS_SERVERS:
            if server["id"] == server_id:
                servers_to_process = [server]
                break
    else:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã
        servers_to_process = VLESS_SERVERS
    
    for server in servers_to_process:
        address = server["address"]
        port = server["port"]
        security = server["security"]
        sni = server.get("sni", "")
        reality_pbk = server.get("reality_pbk", "")
        short_id = server.get("short_id", "")
        flow = server.get("flow", "")
        
        # –°–æ–∑–¥–∞–µ–º VLESS —Å—Å—ã–ª–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if security == "reality":
            # Reality –∫–æ–Ω—Ñ–∏–≥
            clean_sni = sni.replace(":443", "") if sni else ""
            vless_link = (
                f"vless://{vless_uuid}@{address}:{port}?"
                f"type=tcp&"
                f"security=reality&"
                f"flow={flow}&"
                f"pbk={reality_pbk}&"
                f"fp=chrome&"
                f"sni={clean_sni}&"
                f"sid={short_id}#"
                f"VAC-VPN-{user_id}-{server['id']}"
            )
        else:
            # –ü—Ä–æ—Å—Ç–æ–π VLESS –±–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            vless_link = (
                f"vless://{vless_uuid}@{address}:{port}?"
                f"encryption=none&"
                f"type=tcp&"
                f"security=none#"
                f"VAC-VPN-{user_id}-{server['id']}"
            )
        
        # –ö–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        config = {
            "name": f"{server['name']} - {user_id}",
            "protocol": "vless",
            "uuid": vless_uuid,
            "server": address,
            "port": port,
            "security": security,
            "type": "tcp",
            "remark": f"VAC VPN - {user_id} - {server['name']}",
            "user_id": user_id,
            "server_id": server["id"]
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º Reality –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if security == "reality":
            config.update({
                "reality_pbk": reality_pbk,
                "sni": sni.replace(":443", "") if sni else "",
                "short_id": short_id,
                "flow": flow,
                "fingerprint": "chrome"
            })
        else:
            config.update({
                "encryption": "none"
            })
        
        encoded_vless_link = urllib.parse.quote(vless_link)
        
        configs.append({
            "vless_link": vless_link,
            "config": config,
            "qr_code": f"https://api.qrserver.com/v1/create-qr-code/?size=200x200&data={encoded_vless_link}",
            "server_name": server["name"],
            "server_id": server["id"]
        })
    
    return configs

def process_subscription_days(user_id: str):
    if not db:
        logger.error("‚ùå Database not connected")
        return False
    
    try:
        user = get_user(user_id)
        if not user or not user.get('has_subscription', False):
            return True
            
        subscription_days = user.get('subscription_days', 0)
        last_check = user.get('last_subscription_check')
        today = datetime.now().date()
        
        if not last_check:
            db.collection('users').document(user_id).update({
                'last_subscription_check': today.isoformat()
            })
            return True
        else:
            try:
                last_date = datetime.fromisoformat(last_check.replace('Z', '+00:00')).date()
                days_passed = (today - last_date).days
                
                if days_passed > 0:
                    new_days = max(0, subscription_days - days_passed)
                    
                    update_data = {
                        'subscription_days': new_days,
                        'last_subscription_check': today.isoformat()
                    }
                    
                    if new_days == 0:
                        update_data['has_subscription'] = False
                    
                    db.collection('users').document(user_id).update(update_data)
                    logger.info(f"‚úÖ Subscription days processed for user {user_id}: {subscription_days} -> {new_days} (-{days_passed} days)")
                    
            except Exception as e:
                logger.error(f"‚ùå Error processing subscription days: {e}")
        
        return True
            
    except Exception as e:
        logger.error(f"‚ùå Error processing subscription: {e}")
        return False

def save_payment(payment_id: str, user_id: str, amount: float, tariff: str, payment_type: str = "tariff", payment_method: str = "yookassa", selected_server: str = None):
    if not db: 
        logger.error("‚ùå Database not connected")
        return
    try:
        payment_data = {
            'payment_id': payment_id,
            'user_id': user_id,
            'amount': amount,
            'tariff': tariff,
            'status': 'pending',
            'payment_type': payment_type,
            'payment_method': payment_method,
            'created_at': firestore.SERVER_TIMESTAMP,
            'yookassa_id': None
        }
        
        if selected_server:
            payment_data['selected_server'] = selected_server
        
        db.collection('payments').document(payment_id).set(payment_data)
        logger.info(f"‚úÖ Payment saved: {payment_id} for user {user_id}, server: {selected_server}")
    except Exception as e:
        logger.error(f"‚ùå Error saving payment: {e}")

def update_payment_status(payment_id: str, status: str, yookassa_id: str = None):
    if not db: 
        logger.error("‚ùå Database not connected")
        return
    try:
        update_data = {
            'status': status,
            'yookassa_id': yookassa_id
        }
        if status == 'succeeded':
            update_data['confirmed_at'] = firestore.SERVER_TIMESTAMP
        
        db.collection('payments').document(payment_id).update(update_data)
        logger.info(f"‚úÖ Payment status updated: {payment_id} -> {status}")
    except Exception as e:
        logger.error(f"‚ùå Error updating payment status: {e}")

def get_payment(payment_id: str):
    if not db: 
        logger.error("‚ùå Database not connected")
        return None
    try:
        doc = db.collection('payments').document(payment_id).get()
        return doc.to_dict() if doc.exists else None
    except Exception as e:
        logger.error(f"‚ùå Error getting payment: {e}")
        return None

def get_referrals(referrer_id: str):
    if not db: 
        logger.error("‚ùå Database not connected")
        return []
    try:
        referrals = db.collection('referrals').where('referrer_id', '==', referrer_id).stream()
        return [ref.to_dict() for ref in referrals]
    except Exception as e:
        logger.error(f"‚ùå Error getting referrals: {e}")
        return []

def extract_referrer_id(start_param: str) -> str:
    if not start_param:
        return None
    
    logger.info(f"üîç Extracting referrer_id from: '{start_param}'")
    
    if start_param.startswith('ref_'):
        referrer_id = start_param.replace('ref_', '')
        logger.info(f"‚úÖ Found ref_ format: {referrer_id}")
        return referrer_id
    
    if start_param.isdigit():
        logger.info(f"‚úÖ Found digit format: {start_param}")
        return start_param
    
    patterns = [
        r'ref_(\d+)',
        r'ref(\d+)',  
        r'referral_(\d+)',
        r'referral(\d+)',
        r'startapp_(\d+)',
        r'startapp(\d+)',
        r'(\d{8,})',
    ]
    
    for pattern in patterns:
        match = re.search(pattern, start_param)
        if match:
            referrer_id = match.group(1)
            logger.info(f"‚úÖ Found with pattern '{pattern}': {referrer_id}")
            return referrer_id
    
    logger.info(f"‚ö†Ô∏è Using raw start_param as referrer_id: {start_param}")
    return start_param

async def update_subscription_days(user_id: str, additional_days: int, server_id: str = None):
    if not db: 
        logger.error("‚ùå Database not connected")
        return False
    try:
        user_ref = db.collection('users').document(user_id)
        user = user_ref.get()
        
        if user.exists:
            user_data = user.to_dict()
            current_days = user_data.get('subscription_days', 0)
            new_days = current_days + additional_days
            
            has_subscription = user_data.get('has_subscription', False)
            if not has_subscription and additional_days > 0:
                has_subscription = True
            
            update_data = {
                'subscription_days': new_days,
                'has_subscription': has_subscription,
                'updated_at': firestore.SERVER_TIMESTAMP
            }
            
            # –ì–ê–†–ê–ù–¢–ò–†–£–ï–ú —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å UUID –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            if has_subscription:
                try:
                    vless_uuid = await ensure_user_uuid(user_id, server_id)
                    update_data['vless_uuid'] = vless_uuid
                    update_data['subscription_start'] = datetime.now().isoformat()
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                    if server_id:
                        update_data['preferred_server'] = server_id
                    
                    logger.info(f"üîë UUID ensured for user {user_id} on server {server_id}: {vless_uuid}")
                except Exception as e:
                    logger.error(f"‚ùå Failed to ensure UUID for user {user_id}: {e}")
                    return False
            
            user_ref.update(update_data)
            logger.info(f"‚úÖ Subscription days updated for user {user_id}: {current_days} -> {new_days} (+{additional_days}) on server {server_id}")
            return True
        else:
            logger.error(f"‚ùå User {user_id} not found")
            return False
    except Exception as e:
        logger.error(f"‚ùå Error updating subscription days: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    try:
        logger.info("ü§ñ Starting Telegram bot in separate process...")
        subprocess.run([sys.executable, "bot.py"], check=True)
    except Exception as e:
        logger.error(f"‚ùå Bot execution error: {e}")

@app.on_event("startup")
async def startup_event():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ VAC VPN Server starting up...")
    
    # –ö–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–æ—Ç–∏–ø –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
    ensure_logo_exists()
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    logger.info("üîÑ Starting Telegram bot automatically...")
    bot_thread = threading.Thread(target=run_bot, daemon=True)
    bot_thread.start()
    logger.info("‚úÖ Telegram bot started successfully")

# API –≠–ù–î–ü–û–ò–ù–¢–´
@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    if os.path.exists("index.html"):
        with open("index.html", "r", encoding="utf-8") as f:
            return HTMLResponse(content=f.read())
    
    xray_users_count = await get_xray_users_count()
    return {
        "message": "VAC VPN API is running", 
        "status": "ok",
        "firebase": "connected" if db else "disconnected",
        "xray_users": xray_users_count,
        "available_servers": len(VLESS_SERVERS),
        "environment": "production",
        "timestamp": datetime.now().isoformat()
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    xray_users_count = await get_xray_users_count()
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "service": "VAC VPN API",
        "firebase": "connected" if db else "disconnected",
        "xray_users": xray_users_count,
        "available_servers": [server["name"] for server in VLESS_SERVERS],
        "database_connected": db is not None,
        "environment": "production"
    }

@app.get("/servers")
async def get_available_servers():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    return {
        "success": True,
        "servers": VLESS_SERVERS
    }

@app.get("/check-xray-connection")
async def check_xray_connection():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Xray Manager"""
    try:
        results = {}
        for server_name, server_config in XRAY_SERVERS.items():
            try:
                async with httpx.AsyncClient() as client:
                    response = await client.get(
                        f"{server_config['url']}/health",
                        headers={"X-API-Key": server_config["api_key"]},
                        timeout=10.0
                    )
                    results[server_name] = {
                        "connected": response.status_code == 200,
                        "status_code": response.status_code,
                        "response": response.text
                    }
            except Exception as e:
                results[server_name] = {"connected": False, "error": str(e)}
        
        return results
    except Exception as e:
        return {"error": str(e)}

@app.delete("/clear-referrals/{user_id}")
async def clear_referrals(user_id: str):
    try:
        if not db:
            return {"error": "Database not connected"}
        
        referrals_ref = db.collection('referrals').where('referrer_id', '==', user_id)
        referrals = referrals_ref.stream()
        for ref in referrals:
            ref.reference.delete()
        
        user_ref = db.collection('users').document(user_id)
        user_ref.update({
            'referred_by': firestore.DELETE_FIELD
        })
        
        logger.info(f"üßπ Cleared referrals for user {user_id}")
        return {"success": True, "message": "Referrals cleared"}
        
    except Exception as e:
        logger.error(f"‚ùå Error clearing referrals: {e}")
        return {"error": str(e)}

@app.post("/init-user")
async def init_user(request: InitUserRequest):
    try:
        logger.info(f"üîç INIT-USER START: user_id={request.user_id}, start_param='{request.start_param}'")
        
        if not db:
            return JSONResponse(status_code=500, content={"error": "Database not connected"})
        
        if not request.user_id or request.user_id == 'unknown':
            return JSONResponse(status_code=400, content={"error": "Invalid user ID"})
        
        referrer_id = None
        is_referral = False
        bonus_applied = False
        
        if request.start_param:
            referrer_id = extract_referrer_id(request.start_param)
            logger.info(f"üéØ Extracted referrer_id: {referrer_id}")
            
            if referrer_id:
                referrer = get_user(referrer_id)
                
                if referrer and referrer_id != request.user_id:
                    referral_id = f"{referrer_id}_{request.user_id}"
                    referral_exists = db.collection('referrals').document(referral_id).get().exists
                    
                    if not referral_exists:
                        is_referral = True
                        bonus_result = add_referral_bonus_immediately(referrer_id, request.user_id)
                        if bonus_result:
                            bonus_applied = True
                            logger.info(f"üéâ Referral bonuses applied immediately for {request.user_id}")
        
        user_ref = db.collection('users').document(request.user_id)
        user_doc = user_ref.get()
        
        if not user_doc.exists:
            user_data = {
                'user_id': request.user_id,
                'username': request.username,
                'first_name': request.first_name,
                'last_name': request.last_name,
                'balance': 100.0 if bonus_applied else 0.0,
                'has_subscription': False,
                'subscription_days': 0,
                'subscription_start': None,
                'vless_uuid': None,
                'preferred_server': None,  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
                'created_at': firestore.SERVER_TIMESTAMP
            }
            
            if is_referral and referrer_id:
                user_data['referred_by'] = referrer_id
                logger.info(f"üîó User {request.user_id} referred by {referrer_id}")
            
            user_ref.set(user_data)
            logger.info(f"‚úÖ User created: {request.user_id}, referral: {is_referral}, bonus_applied: {bonus_applied}")
            
            return {
                "success": True, 
                "message": "User created",
                "user_id": request.user_id,
                "is_referral": is_referral,
                "bonus_applied": bonus_applied
            }
        else:
            user_data = user_doc.to_dict()
            has_referrer = user_data.get('referred_by') is not None
            
            return {
                "success": True, 
                "message": "User already exists", 
                "user_id": request.user_id,
                "is_referral": has_referrer,
                "bonus_applied": False
            }
            
    except Exception as e:
        logger.error(f"‚ùå Error initializing user: {e}")
        return JSONResponse(status_code=500, content={"error": str(e)})

@app.get("/user-data")
async def get_user_info(user_id: str):
    try:
        if not db:
            return JSONResponse(status_code=500, content={"error": "Database not connected"})
        
        if not user_id or user_id == 'unknown':
            return JSONResponse(status_code=400, content={"error": "Invalid user ID"})
            
        process_subscription_days(user_id)
            
        user = get_user(user_id)
        if not user:
            return {
                "user_id": user_id,
                "balance": 0,
                "has_subscription": False,
                "subscription_days": 0,
                "vless_uuid": None,
                "preferred_server": None
            }
        
        has_subscription = user.get('has_subscription', False)
        subscription_days = user.get('subscription_days', 0)
        vless_uuid = user.get('vless_uuid')
        balance = user.get('balance', 0.0)
        preferred_server = user.get('preferred_server')
        
        referrals = get_referrals(user_id)
        referral_count = len(referrals)
        total_bonus_money = sum([ref.get('referrer_bonus', 0) for ref in referrals])
        
        return {
            "user_id": user_id,
            "balance": balance,
            "has_subscription": has_subscription,
            "subscription_days": subscription_days,
            "vless_uuid": vless_uuid,
            "preferred_server": preferred_server,
            "referral_stats": {
                "total_referrals": referral_count,
                "total_bonus_money": total_bonus_money,
                "referrer_bonus": REFERRAL_BONUS_REFERRER,
                "referred_bonus": REFERRAL_BONUS_REFERRED
            },
            "available_servers": VLESS_SERVERS
        }
        
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": f"Error getting user info: {str(e)}"})

@app.post("/add-balance")
async def add_balance(request: AddBalanceRequest):
    try:
        logger.info(f"üí∞ ADD-BALANCE START: user_id={request.user_id}, amount={request.amount}, payment_method={request.payment_method}")
        
        if not db:
            return JSONResponse(status_code=500, content={"error": "Database not connected"})
            
        user = get_user(request.user_id)
        if not user:
            return JSONResponse(status_code=404, content={"error": "User not found"})
        
        if request.amount < 10:
            return JSONResponse(status_code=400, content={"error": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 10‚ÇΩ"})
        
        if request.amount > 50000:
            return JSONResponse(status_code=400, content={"error": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 50,000‚ÇΩ"})
        
        if request.payment_method == "yookassa":
            SHOP_ID = os.getenv("SHOP_ID")
            API_KEY = os.getenv("API_KEY")
            
            if not SHOP_ID or not API_KEY:
                return JSONResponse(status_code=500, content={"error": "Payment gateway not configured"})
            
            payment_id = str(uuid.uuid4())
            save_payment(payment_id, request.user_id, request.amount, "balance", "balance", "yookassa")
            
            yookassa_data = {
                "amount": {"value": f"{request.amount:.2f}", "currency": "RUB"},
                "confirmation": {"type": "redirect", "return_url": "https://t.me/vaaaac_bot"},
                "capture": True,
                "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ VAC VPN –Ω–∞ {request.amount}‚ÇΩ",
                "metadata": {
                    "payment_id": payment_id,
                    "user_id": request.user_id,
                    "payment_type": "balance",
                    "amount": request.amount
                }
            }
            
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    "https://api.yookassa.ru/v3/payments",
                    auth=(SHOP_ID, API_KEY),
                    headers={
                        "Content-Type": "application/json",
                        "Idempotence-Key": payment_id
                    },
                    json=yookassa_data,
                    timeout=30.0
                )
            
            if response.status_code in [200, 201]:
                payment_data = response.json()
                update_payment_status(payment_id, "pending", payment_data.get("id"))
                
                return {
                    "success": True,
                    "payment_id": payment_id,
                    "payment_url": payment_data["confirmation"]["confirmation_url"],
                    "amount": request.amount,
                    "status": "pending",
                    "message": f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {request.amount}‚ÇΩ"
                }
            else:
                return JSONResponse(status_code=500, content={"error": f"Payment gateway error: {response.status_code}"})
        else:
            return JSONResponse(status_code=400, content={"error": "Invalid payment method"})
        
    except Exception as e:
        logger.error(f"‚ùå Error adding balance: {e}")
        return JSONResponse(status_code=500, content={"error": str(e)})

@app.post("/activate-tariff")
async def activate_tariff(request: ActivateTariffRequest):
    try:
        if not db:
            return JSONResponse(status_code=500, content={"error": "Database not connected"})
            
        user = get_user(request.user_id)
        if not user:
            return JSONResponse(status_code=404, content={"error": "User not found"})
        
        if request.tariff not in TARIFFS:
            return JSONResponse(status_code=400, content={"error": "Invalid tariff"})
            
        tariff_data = TARIFFS[request.tariff]
        tariff_price = tariff_data["price"]
        tariff_days = tariff_data["days"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
        selected_server = request.selected_server
        if selected_server and selected_server not in [server["id"] for server in VLESS_SERVERS]:
            return JSONResponse(status_code=400, content={"error": "Invalid server selected"})
        
        if request.payment_method == "balance":
            user_balance = user.get('balance', 0.0)
            
            if user_balance < tariff_price:
                return JSONResponse(status_code=400, content={"error": f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {tariff_price}‚ÇΩ, –¥–æ—Å—Ç—É–ø–Ω–æ: {user_balance}‚ÇΩ"})
            
            payment_id = str(uuid.uuid4())
            save_payment(payment_id, request.user_id, tariff_price, request.tariff, "tariff", "balance", selected_server)
            
            update_user_balance(request.user_id, -tariff_price)
            
            success = await update_subscription_days(request.user_id, tariff_days, selected_server)
            
            if not success:
                return JSONResponse(status_code=500, content={"error": "–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"})
            
            # –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–µ
            if user.get('referred_by'):
                referrer_id = user['referred_by']
                referral_id = f"{referrer_id}_{request.user_id}"
                
                referral_exists = db.collection('referrals').document(referral_id).get().exists
                
                if not referral_exists:
                    logger.info(f"üéÅ Applying referral bonus for {request.user_id} referred by {referrer_id}")
                    add_referral_bonus_immediately(referrer_id, request.user_id)
            
            update_payment_status(payment_id, "succeeded")
            
            return {
                "success": True,
                "payment_id": payment_id,
                "amount": tariff_price,
                "days": tariff_days,
                "selected_server": selected_server,
                "status": "succeeded",
                "message": f"–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {selected_server}!"
            }
        
        elif request.payment_method == "yookassa":
            SHOP_ID = os.getenv("SHOP_ID")
            API_KEY = os.getenv("API_KEY")
            
            if not SHOP_ID or not API_KEY:
                return JSONResponse(status_code=500, content={"error": "Payment gateway not configured"})
            
            payment_id = str(uuid.uuid4())
            save_payment(payment_id, request.user_id, tariff_price, request.tariff, "tariff", "yookassa", selected_server)
            
            yookassa_data = {
                "amount": {"value": f"{tariff_price:.2f}", "currency": "RUB"},
                "confirmation": {"type": "redirect", "return_url": "https://t.me/vaaaac_bot"},
                "capture": True,
                "description": f"–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ {tariff_data['name']} - VAC VPN (–°–µ—Ä–≤–µ—Ä: {selected_server})",
                "metadata": {
                    "payment_id": payment_id,
                    "user_id": request.user_id,
                    "tariff": request.tariff,
                    "payment_type": "tariff",
                    "tariff_days": tariff_days,
                    "selected_server": selected_server
                }
            }
            
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    "https://api.yookassa.ru/v3/payments",
                    auth=(SHOP_ID, API_KEY),
                    headers={
                        "Content-Type": "application/json",
                        "Idempotence-Key": payment_id
                    },
                    json=yookassa_data,
                    timeout=30.0
                )
            
            if response.status_code in [200, 201]:
                payment_data = response.json()
                update_payment_status(payment_id, "pending", payment_data.get("id"))
                
                return {
                    "success": True,
                    "payment_id": payment_id,
                    "payment_url": payment_data["confirmation"]["confirmation_url"],
                    "amount": tariff_price,
                    "days": tariff_days,
                    "selected_server": selected_server,
                    "status": "pending",
                    "message": f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {selected_server}"
                }
            else:
                return JSONResponse(status_code=500, content={"error": f"Payment gateway error: {response.status_code}"})
        
        else:
            return JSONResponse(status_code=400, content={"error": "Invalid payment method"})
        
    except Exception as e:
        logger.error(f"‚ùå Error activating tariff: {e}")
        return JSONResponse(status_code=500, content={"error": str(e)})

@app.post("/buy-with-balance")
async def buy_with_balance(request: BuyWithBalanceRequest):
    try:
        logger.info(f"üí∞ BUY-WITH-BALANCE: user_id={request.user_id}, tariff={request.tariff_id}, price={request.tariff_price}, server={request.selected_server}")
        
        if not db:
            return JSONResponse(status_code=500, content={"error": "Database not connected"})
        
        user = get_user(request.user_id)
        if not user:
            return JSONResponse(status_code=404, content={"error": "User not found"})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
        selected_server = request.selected_server
        if selected_server and selected_server not in [server["id"] for server in VLESS_SERVERS]:
            return JSONResponse(status_code=400, content={"error": "Invalid server selected"})
        
        user_balance = user.get('balance', 0.0)
        
        if user_balance < request.tariff_price:
            return JSONResponse(status_code=400, content={
                "success": False,
                "error": f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ {user_balance}‚ÇΩ, –∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è {request.tariff_price}‚ÇΩ"
            })
        
        payment_id = str(uuid.uuid4())
        save_payment(payment_id, request.user_id, request.tariff_price, request.tariff_id, "tariff", "balance", selected_server)
        
        update_user_balance(request.user_id, -request.tariff_price)
        
        success = await update_subscription_days(request.user_id, request.tariff_days, selected_server)
        
        if not success:
            return JSONResponse(status_code=500, content={"error": "–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"})
        
        # –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–µ
        if user.get('referred_by'):
            referrer_id = user['referred_by']
            referral_id = f"{referrer_id}_{request.user_id}"
            
            referral_exists = db.collection('referrals').document(referral_id).get().exists
            
            if not referral_exists:
                logger.info(f"üéÅ Applying referral bonus for {request.user_id} referred by {referrer_id}")
                add_referral_bonus_immediately(referrer_id, request.user_id)
        
        update_payment_status(payment_id, "succeeded")
        
        return {
            "success": True,
            "payment_id": payment_id,
            "amount": request.tariff_price,
            "days": request.tariff_days,
            "selected_server": selected_server,
            "status": "succeeded",
            "message": f"–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {selected_server}!"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error in buy-with-balance: {e}")
        return JSONResponse(status_code=500, content={"error": str(e)})

@app.get("/payment-status")
async def check_payment(payment_id: str, user_id: str):
    try:
        if not db:
            return JSONResponse(status_code=500, content={"error": "Database not connected"})
            
        if not payment_id or payment_id == 'undefined':
            return JSONResponse(status_code=400, content={"error": "Invalid payment ID"})
            
        payment = get_payment(payment_id)
        if not payment:
            return JSONResponse(status_code=404, content={"error": "Payment not found"})
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –∞ –Ω–µ –∏–∑ payment
        actual_user_id = user_id if user_id != 'undefined' else payment.get('user_id')
        
        if not actual_user_id or actual_user_id == 'undefined':
            return JSONResponse(status_code=400, content={"error": "Invalid user ID"})
        
        if payment['status'] == 'succeeded':
            if payment['payment_type'] == 'balance':
                return {
                    "success": True,
                    "status": "succeeded",
                    "payment_id": payment_id,
                    "amount": payment['amount'],
                    "balance_added": payment['amount']
                }
            else:
                return {
                    "success": True,
                    "status": "succeeded",
                    "payment_id": payment_id,
                    "amount": payment['amount'],
                    "selected_server": payment.get('selected_server')
                }
        
        if payment.get('payment_method') == 'yookassa':
            yookassa_id = payment.get('yookassa_id')
            if yookassa_id:
                SHOP_ID = os.getenv("SHOP_ID")
                API_KEY = os.getenv("API_KEY")
                
                if not SHOP_ID or not API_KEY:
                    return JSONResponse(status_code=500, content={"error": "Payment gateway not configured"})
                
                async with httpx.AsyncClient() as client:
                    response = await client.get(
                        f"https://api.yookassa.ru/v3/payments/{yookassa_id}",
                        auth=(SHOP_ID, API_KEY),
                        timeout=30.0
                    )
                    
                    if response.status_code == 200:
                        yookassa_data = response.json()
                        status = yookassa_data.get('status')
                        
                        update_payment_status(payment_id, status, yookassa_id)
                        
                        if status == 'succeeded':
                            if payment['payment_type'] == 'balance':
                                amount = payment['amount']
                                success = update_user_balance(actual_user_id, amount)
                                
                                if success:
                                    logger.info(f"‚úÖ Balance topped up for user {actual_user_id}: +{amount}‚ÇΩ")
                                    return {
                                        "success": True,
                                        "status": status,
                                        "payment_id": payment_id,
                                        "amount": amount,
                                        "balance_added": amount,
                                        "message": f"–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ!"
                                    }
                                else:
                                    return JSONResponse(status_code=500, content={"error": "–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"})
                            
                            # –î–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º user_id –∏–∑ –ø–ª–∞—Ç–µ–∂–∞
                            tariff_user_id = payment.get('user_id', actual_user_id)
                            tariff = payment['tariff']
                            tariff_days = TARIFFS[tariff]["days"]
                            selected_server = payment.get('selected_server')
                            
                            success = await update_subscription_days(tariff_user_id, tariff_days, selected_server)
                            
                            if not success:
                                logger.error(f"‚ùå Failed to activate subscription for user {tariff_user_id}")
                                return JSONResponse(status_code=500, content={"error": "Failed to activate subscription"})
                            
                            user = get_user(tariff_user_id)
                            if user and user.get('referred_by'):
                                referrer_id = user['referred_by']
                                referral_id = f"{referrer_id}_{tariff_user_id}"
                                
                                referral_exists = db.collection('referrals').document(referral_id).get().exists
                                
                                if not referral_exists:
                                    logger.info(f"üéÅ Applying referral bonus for {tariff_user_id} referred by {referrer_id}")
                                    add_referral_bonus_immediately(referrer_id, tariff_user_id)
                            
                            logger.info(f"‚úÖ Subscription activated for user {tariff_user_id}: +{tariff_days} days on server {selected_server}")
                            
                            return {
                                "success": True,
                                "status": status,
                                "payment_id": payment_id,
                                "amount": payment['amount'],
                                "days_added": tariff_days,
                                "selected_server": selected_server
                            }
        
        return {
            "success": True,
            "status": payment['status'],
            "payment_id": payment_id
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error checking payment: {e}")
        return JSONResponse(status_code=500, content={"error": f"Error checking payment: {str(e)}"})

@app.get("/get-vless-config")
async def get_vless_config(user_id: str, server_id: str = None):
    try:
        if not db:
            return JSONResponse(status_code=500, content={"error": "Database not connected"})
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
        process_subscription_days(user_id)
            
        user = get_user(user_id)
        if not user:
            return JSONResponse(status_code=404, content={"error": "User not found"})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        if not user.get('has_subscription', False):
            return JSONResponse(status_code=400, content={"error": "No active subscription"})
        
        # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Å–µ—Ä–≤–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
        if not server_id:
            server_id = user.get('preferred_server')
            if not server_id and VLESS_SERVERS:
                server_id = VLESS_SERVERS[0]["id"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
        if server_id not in [server["id"] for server in VLESS_SERVERS]:
            return JSONResponse(status_code=400, content={"error": "Invalid server ID"})
        
        # –ì–ê–†–ê–ù–¢–ò–†–£–ï–ú —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å UUID –∏ –æ–Ω –≤ Xray –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
        vless_uuid = await ensure_user_uuid(user_id, server_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        configs = create_user_vless_configs(user_id, vless_uuid, server_id)
        
        logger.info(f"‚úÖ Generated {len(configs)} configs for user {user_id} on server {server_id}")
        
        return {
            "success": True,
            "user_id": user_id,
            "vless_uuid": vless_uuid,
            "has_subscription": True,
            "subscription_days": user.get('subscription_days', 0),
            "selected_server": server_id,
            "configs": configs
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error getting VLESS config: {e}")
        return JSONResponse(status_code=500, content={"error": f"Error getting VLESS config: {str(e)}"})

@app.post("/server/{server_id}/add-user")
async def server_add_user(server_id: str, request: dict):
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
    try:
        if server_id not in XRAY_SERVERS:
            return JSONResponse(status_code=404, content={"error": "Server not found"})
        
        user_uuid = request.get('uuid')
        if not user_uuid:
            return JSONResponse(status_code=400, content={"error": "UUID required"})
        
        # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Xray
        success = await add_user_to_xray_direct(user_uuid, server_id)
        
        if success:
            return {"status": "success", "message": f"User added to {server_id}"}
        else:
            return JSONResponse(status_code=500, content={"error": "Failed to add user"})
            
    except Exception as e:
        logger.error(f"‚ùå Error in server add user: {e}")
        return JSONResponse(status_code=500, content={"error": str(e)})

async def add_user_to_xray_direct(user_uuid: str, server_id: str) -> bool:
    """–ü—Ä—è–º–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Xray –∫–æ–Ω—Ñ–∏–≥"""
    try:
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –Ω–∞ –∫–∞–∂–¥–æ–º —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ SSH
        # –∏–ª–∏ —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        return True
    except Exception as e:
        logger.error(f"‚ùå Error adding user directly: {e}")
        return False

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞
@app.get("/logo")
async def get_logo():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–≥–æ—Ç–∏–ø"""
    logo_path = "static/Airbrush-Image-Enhancer-1753455007914.png"
    if os.path.exists(logo_path):
        return FileResponse(logo_path, media_type="image/png")
    else:
        # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        create_placeholder_logo()
        if os.path.exists(logo_path):
            return FileResponse(logo_path, media_type="image/png")
        else:
            raise HTTPException(status_code=404, detail="Logo not found")

# –ê–¥–º–∏–Ω—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Xray —á–µ—Ä–µ–∑ API
@app.post("/admin/generate-unique-uuid")
async def admin_generate_unique_uuid(user_id: str, server_id: str = None):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π UUID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ"""
    try:
        vless_uuid = await ensure_user_uuid(user_id, server_id)
        
        return {
            "success": True,
            "user_id": user_id,
            "vless_uuid": vless_uuid,
            "server_id": server_id,
            "message": f"Unique UUID generated and added to Xray server: {server_id}"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error generating unique UUID: {e}")
        return {"error": str(e)}

@app.get("/admin/user-uuid-info")
async def admin_user_uuid_info(user_id: str):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö"""
    try:
        user = get_user(user_id)
        if not user:
            return {"error": "User not found"}
        
        vless_uuid = user.get('vless_uuid')
        server_status = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –∫–∞–∂–¥–æ–º —Å–µ—Ä–≤–µ—Ä–µ
        for server_id in XRAY_SERVERS.keys():
            in_xray = await check_user_in_xray(vless_uuid, server_id) if vless_uuid else False
            server_status[server_id] = {
                "in_xray": in_xray,
                "server_name": XRAY_SERVERS[server_id].get("display_name", server_id)
            }
        
        return {
            "user_id": user_id,
            "has_uuid": vless_uuid is not None,
            "vless_uuid": vless_uuid,
            "server_status": server_status,
            "has_subscription": user.get('has_subscription', False),
            "subscription_days": user.get('subscription_days', 0),
            "preferred_server": user.get('preferred_server')
        }
        
    except Exception as e:
        return {"error": str(e)}

@app.post("/admin/generate-uuid-for-user")
async def generate_uuid_for_user(user_id: str, server_id: str = None):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å UUID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ Xray"""
    try:
        if not db:
            return {"error": "Database not connected"}
        
        user = get_user(user_id)
        if not user:
            return {"error": "User not found"}
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å UUID
        existing_uuid = user.get('vless_uuid')
        if existing_uuid:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ Xray –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ, –µ—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º
            if not await check_user_in_xray(existing_uuid, server_id):
                success = await add_user_to_xray(existing_uuid, server_id)
                if success:
                    return {
                        "success": True,
                        "message": f"UUID {existing_uuid} –¥–æ–±–∞–≤–ª–µ–Ω –≤ Xray —Å–µ—Ä–≤–µ—Ä: {server_id}",
                        "user_uuid": existing_uuid,
                        "server_id": server_id,
                        "action": "added_to_xray"
                    }
                else:
                    return {"error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å UUID –≤ Xray —Å–µ—Ä–≤–µ—Ä: {server_id}"}
            else:
                return {
                    "success": True,
                    "message": f"UUID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –µ—Å—Ç—å –≤ Xray —Å–µ—Ä–≤–µ—Ä–µ: {server_id}",
                    "user_uuid": existing_uuid,
                    "server_id": server_id,
                    "action": "already_exists"
                }
        
        # –ï—Å–ª–∏ UUID –Ω–µ—Ç - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
        user_uuid = generate_user_uuid()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        user_ref = db.collection('users').document(user_id)
        user_ref.update({
            'vless_uuid': user_uuid,
            'updated_at': firestore.SERVER_TIMESTAMP
        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ Xray –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
        success = await add_user_to_xray(user_uuid, server_id)
        if success:
            return {
                "success": True,
                "message": f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π UUID –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ Xray —Å–µ—Ä–≤–µ—Ä: {server_id}",
                "user_uuid": user_uuid,
                "server_id": server_id,
                "action": "generated_and_added"
            }
        else:
            return {"error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å UUID –≤ Xray —Å–µ—Ä–≤–µ—Ä: {server_id}"}
        
    except Exception as e:
        logger.error(f"‚ùå Error generating UUID: {e}")
        return {"error": str(e)}

@app.get("/admin/xray-users")
async def get_xray_users(server_id: str = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Xray –∫–æ–Ω—Ñ–∏–≥–µ —á–µ—Ä–µ–∑ API"""
    try:
        results = {}
        servers_to_check = []
        
        if server_id and server_id in XRAY_SERVERS:
            servers_to_check = [(server_id, XRAY_SERVERS[server_id])]
        else:
            servers_to_check = list(XRAY_SERVERS.items())
        
        for server_name, server_config in servers_to_check:
            try:
                async with httpx.AsyncClient() as client:
                    response = await client.get(
                        f"{server_config['url']}/users",
                        headers={"X-API-Key": server_config["api_key"]},
                        timeout=30.0
                    )
                    
                    if response.status_code == 200:
                        data = response.json()
                        results[server_name] = {
                            "users": data.get("users", []),
                            "count": len(data.get("users", [])),
                            "server_name": server_config.get("display_name", server_name)
                        }
                    else:
                        results[server_name] = {"error": f"Status: {response.status_code}"}
            except Exception as e:
                results[server_name] = {"error": str(e)}
        
        return results
    except Exception as e:
        return {"error": str(e)}

@app.post("/admin/add-balance")
async def admin_add_balance(user_id: str, amount: float):
    try:
        if not db:
            return {"error": "Database not connected"}
        
        success = update_user_balance(user_id, amount)
        if success:
            return {"success": True, "message": f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ"}
        else:
            return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"}
            
    except Exception as e:
        logger.error(f"‚ùå Error adding balance: {e}")
        return {"error": str(e)}

@app.post("/admin/reset-user")
async def admin_reset_user(user_id: str):
    try:
        if not db:
            return {"error": "Database not connected"}
        
        user = get_user(user_id)
        if user and user.get('vless_uuid'):
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö Xray —Å–µ—Ä–≤–µ—Ä–æ–≤
            await remove_user_from_xray(user['vless_uuid'])
        
        user_ref = db.collection('users').document(user_id)
        user_ref.update({
            'balance': 0.0,
            'subscription_days': 0,
            'has_subscription': False,
            'vless_uuid': None,
            'preferred_server': None,
            'referred_by': firestore.DELETE_FIELD,
            'updated_at': firestore.SERVER_TIMESTAMP
        })
        
        referrals_ref = db.collection('referrals').where('referrer_id', '==', user_id)
        referrals = referrals_ref.stream()
        for ref in referrals:
            ref.reference.delete()
        
        referrals_ref = db.collection('referrals').where('referred_id', '==', user_id)
        referrals = referrals_ref.stream()
        for ref in referrals:
            ref.reference.delete()
        
        return {"success": True, "message": f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω—ã"}
        
    except Exception as e:
        logger.error(f"‚ùå Error resetting user: {e}")
        return {"error": str(e)}

@app.post("/admin/test-add-user")
async def test_add_user(user_id: str, server_id: str = None):
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Xray"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º UUID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = get_user(user_id)
        if not user:
            return {"error": "User not found"}
        
        vless_uuid = user.get('vless_uuid')
        if not vless_uuid:
            vless_uuid = generate_user_uuid()
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_ref = db.collection('users').document(user_id)
            user_ref.update({
                'vless_uuid': vless_uuid,
                'updated_at': firestore.SERVER_TIMESTAMP
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ Xray –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
        success = await add_user_to_xray(vless_uuid, server_id)
        
        if success:
            return {
                "success": True,
                "user_id": user_id,
                "vless_uuid": vless_uuid,
                "server_id": server_id,
                "message": f"User successfully added to Xray server: {server_id}"
            }
        else:
            return {
                "success": False,
                "error": f"Failed to add user to Xray server: {server_id}"
            }
            
    except Exception as e:
        logger.error(f"‚ùå Error in test add user: {e}")
        return {"error": str(e)}

@app.get("/admin/server-status")
async def admin_server_status():
    """–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    try:
        status = {}
        for server_id, server_config in XRAY_SERVERS.items():
            try:
                async with httpx.AsyncClient() as client:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
                    health_response = await client.get(
                        f"{server_config['url']}/health",
                        headers={"X-API-Key": server_config["api_key"]},
                        timeout=10.0
                    )
                    
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    users_response = await client.get(
                        f"{server_config['url']}/users",
                        headers={"X-API-Key": server_config["api_key"]},
                        timeout=10.0
                    )
                    
                    status[server_id] = {
                        "name": server_config.get("display_name", server_id),
                        "health": health_response.status_code == 200,
                        "users_count": len(users_response.json().get("users", [])) if users_response.status_code == 200 else 0,
                        "url": server_config["url"]
                    }
                    
            except Exception as e:
                status[server_id] = {
                    "name": server_config.get("display_name", server_id),
                    "health": False,
                    "error": str(e),
                    "url": server_config["url"]
                }
        
        return status
    except Exception as e:
        return {"error": str(e)}

if __name__ == "__main__":
    import uvicorn
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)
