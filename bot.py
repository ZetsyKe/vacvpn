import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder, WebAppInfo
from dotenv import load_dotenv
from typing import Dict, List

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ key.env
load_dotenv("backend/key.env")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
WEB_APP_URL = "https://vacvpn.vercel.app"
SUPPORT_NICK = "@vacvpn_support"
TG_CHANNEL = "@vac_vpn"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ key.env")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–∞
referrals_db: Dict[int, List[int]] = {}
user_balances: Dict[int, int] = {}
referral_checks: Dict[int, bool] = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="üîê –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"),
        types.KeyboardButton(text="üìä –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã")
    )
    builder.row(
        types.KeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª–∫–∞"),
        types.KeyboardButton(text="üõ†Ô∏è –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
    )
    return builder.as_markup(resize_keyboard=True)

def get_cabinet_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="üì≤ –û—Ç–∫—Ä—ã—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
            web_app=WebAppInfo(url=WEB_APP_URL)
        )
    )
    builder.row(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    return builder.as_markup()

def get_ref_keyboard(user_id: int):
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="ü§úü§õ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π",
            url=f"https://t.me/share/url?url=https://t.me/vacvpnbot?start=ref_{user_id}"
        )
    )
    builder.row(
        types.InlineKeyboardButton(text="üìä –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="my_referrals")
    )
    builder.row(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    return builder.as_markup()

def get_support_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="üìû –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
            url=f"https://t.me/{SUPPORT_NICK[1:]}"
        )
    )
    builder.row(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    return builder.as_markup()

def get_referrals_stats_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_ref")
    )
    return builder.as_markup()

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def get_welcome_message(user_name: str, is_referral: bool = False):
    return f"""
<b>–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞, {user_name}!</b>

–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ:

üëâüëâ {WEB_APP_URL} üëàüëà

üë´ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –≤ VAC VPN –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å!

üìå –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª ({TG_CHANNEL})!
"""

def get_cabinet_message():
    return f"""
<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç VAC VPN</b>

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ VPN –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:
üëâüëâ {WEB_APP_URL} üëàüëà
"""

def get_ref_message(user_id: int):
    balance = user_balances.get(user_id, 0)
    ref_count = len(referrals_db.get(user_id, []))
    return f"""
<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ VAC VPN</b>

–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ:
<code>https://t.me/vacvpnbot?start=ref_{user_id}</code>

<b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚îú –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: <b>{ref_count} —á–µ–ª.</b>
‚îî –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{balance}‚ÇΩ</b>

–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <b>50‚ÇΩ</b> –Ω–∞ –±–∞–ª–∞–Ω—Å!
"""

def get_support_message():
    return f"""
<b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ VAC VPN</b>

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:

üìû Telegram: {SUPPORT_NICK}
üì¢ –ù–∞—à –∫–∞–Ω–∞–ª: {TG_CHANNEL}
"""

def get_referrals_stats_message(user_id: int):
    refs = referrals_db.get(user_id, [])
    balance = user_balances.get(user_id, 0)
    active_refs = [ref_id for ref_id in refs if referral_checks.get(ref_id, False)]

    if not refs:
        return "<b>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

    message = "<b>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã</b>\n\n"
    message += f"–í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: <b>{len(refs)} —á–µ–ª.</b>\n"
    message += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: <b>{len(active_refs)} —á–µ–ª.</b>\n"
    message += f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{balance}‚ÇΩ</b>\n\n"
    message += "<b>–°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b>\n"

    for i, ref_id in enumerate(refs, 1):
        status = "‚úÖ" if ref_id in active_refs else "‚ùå"
        message += f"{i}. ID: <code>{ref_id}</code> {status}\n"

    return message

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user = message.from_user
    args = message.text.split()
    is_referral = False

    if len(args) > 1 and args[1].startswith('ref_'):
        referrer_id = int(args[1][4:])
        referred_id = user.id

        if referred_id != referrer_id:
            if referrer_id not in referrals_db:
                referrals_db[referrer_id] = []

            if referred_id not in referrals_db[referrer_id]:
                referrals_db[referrer_id].append(referred_id)
                user_balances[referrer_id] = user_balances.get(referrer_id, 0) + 50
                referral_checks[referred_id] = True
                is_referral = True
                try:
                    await bot.send_message(
                        chat_id=referrer_id,
                        text=f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!\nID: {referred_id}\n–í–∞—à –±–∞–ª–∞–Ω—Å: {user_balances[referrer_id]}‚ÇΩ"
                    )
                except:
                    pass

    await message.answer(
        text=get_welcome_message(user.full_name, is_referral),
        reply_markup=get_main_keyboard()
    )

@dp.message(lambda message: message.text == "üîê –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def cabinet_handler(message: types.Message):
    await message.answer(
        text=get_cabinet_message(),
        reply_markup=get_cabinet_keyboard()
    )

@dp.message(lambda message: message.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª–∫–∞")
async def ref_handler(message: types.Message):
    await message.answer(
        text=get_ref_message(message.from_user.id),
        reply_markup=get_ref_keyboard(message.from_user.id),
        disable_web_page_preview=True
    )

@dp.message(lambda message: message.text == "üõ†Ô∏è –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_handler(message: types.Message):
    await message.answer(
        text=get_support_message(),
        reply_markup=get_support_keyboard()
    )

@dp.message(lambda message: message.text == "üìä –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã")
async def referrals_stats_handler(message: types.Message):
    await message.answer(
        text=get_referrals_stats_message(message.from_user.id),
        reply_markup=get_referrals_stats_keyboard(),
        disable_web_page_preview=True
    )

@dp.callback_query(lambda c: c.data == "back_to_menu")
async def back_to_menu_handler(callback: types.CallbackQuery):
    await callback.message.edit_text(
        text=get_welcome_message(callback.from_user.full_name),
        reply_markup=None
    )
    await callback.message.answer(
        text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back_to_ref")
async def back_to_ref_handler(callback: types.CallbackQuery):
    await callback.message.edit_text(
        text=get_ref_message(callback.from_user.id),
        reply_markup=get_ref_keyboard(callback.from_user.id)
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "my_referrals")
async def my_referrals_handler(callback: types.CallbackQuery):
    await callback.message.edit_text(
        text=get_referrals_stats_message(callback.from_user.id),
        reply_markup=get_referrals_stats_keyboard()
    )
    await callback.answer()

# –ó–∞–ø—É—Å–∫
async def main():
    await bot.set_chat_menu_button(
        menu_button=types.MenuButtonWebApp(
            text="VAC VPN",
            web_app=WebAppInfo(url=WEB_APP_URL)
        )
    )
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
