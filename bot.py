import os
import asyncio
import httpx
import signal
import sys
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder, WebAppInfo
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
logger.info("=" * 50)
logger.info("ü§ñ BOT STARTUP CHECK")
logger.info("=" * 50)
logger.info(f"Python: {sys.version}")
logger.info(f"Directory: {os.getcwd()}")
logger.info(f"TOKEN: {'‚úÖ SET' if os.getenv('TOKEN') else '‚ùå MISSING'}")

if not os.getenv('TOKEN'):
    logger.error("‚ùå CRITICAL: TOKEN environment variable is missing!")
    sys.exit(1)

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
SUPPORT_NICK = os.getenv("SUPPORT_NICK", "@vacvpn_support")
TG_CHANNEL = os.getenv("TG_CHANNEL", "@vac_vpn")

# URL API –∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º Railway URL
RAILWAY_STATIC_URL = os.getenv("RAILWAY_STATIC_URL")
if RAILWAY_STATIC_URL:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ URL —á—Ç–æ –∏ –¥–ª—è API
    API_BASE_URL = f"https://{RAILWAY_STATIC_URL}"
    WEB_APP_URL = f"https://{RAILWAY_STATIC_URL}"  # –í–ê–ñ–ù–û: —Ç–æ—Ç –∂–µ URL!
else:
    API_BASE_URL = "http://localhost:8443"
    WEB_APP_URL = "http://localhost:8443"

BOT_USERNAME = os.getenv("BOT_USERNAME", "vaaaac_bot")

logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ Railway...")
logger.info(f"üåê API —Å–µ—Ä–≤–µ—Ä: {API_BASE_URL}")
logger.info(f"üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {WEB_APP_URL}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = Bot(
    token=TOKEN, 
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

async def make_api_request(endpoint: str, method: str = "GET", json_data: dict = None, params: dict = None):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ URL —á—Ç–æ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        RAILWAY_STATIC_URL = os.getenv("RAILWAY_STATIC_URL")
        if RAILWAY_STATIC_URL:
            API_BASE_URL = f"https://{RAILWAY_STATIC_URL}"
        else:
            API_BASE_URL = "http://localhost:8443"
            
        url = f"{API_BASE_URL}{endpoint}"
        timeout_config = httpx.Timeout(30.0, connect=10.0)
        
        async with httpx.AsyncClient(timeout=timeout_config) as client:
            if method.upper() == "GET":
                response = await client.get(url, params=params)
            elif method.upper() == "POST":
                response = await client.post(url, json=json_data)
            else:
                raise ValueError(f"Unsupported method: {method}")
            
            if response.status_code == 200:
                return response.json()
            else:
                logger.error(f"API returned status {response.status_code} for {url}")
                return {"error": f"API error: {response.status_code}"}
                
    except Exception as e:
        logger.error(f"API request error for {endpoint}: {e}")
        return {"error": f"Connection error: {str(e)}"}

async def get_user_info(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ API"""
    return await make_api_request("/user-data", "GET", params={"user_id": str(user_id)})

async def create_user(user_data: dict):
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API"""
    return await make_api_request("/init-user", "POST", json_data=user_data)

async def get_vless_config(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ API"""
    return await make_api_request("/get-vless-config", "GET", params={"user_id": str(user_id)})

async def send_referral_notification(referrer_id: int, referred_user):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É –æ –Ω–æ–≤–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª–µ"""
    try:
        referred_username = f"@{referred_user.username}" if referred_user.username else referred_user.first_name
        
        message = (
            f"üéâ <b>–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {referred_username}\n"
            f"üí∞ <b>–ë–æ–Ω—É—Å 50‚ÇΩ —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!</b>\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ! üöÄ"
        )
        
        await bot.send_message(
            chat_id=referrer_id,
            text=message
        )
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referrer_id}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referrer_id}: {e}")
        return False

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="üîê –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"),
        types.KeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª–∫–∞")
    )
    builder.row(
        types.KeyboardButton(text="üõ†Ô∏è –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞"),
        types.KeyboardButton(text="üåê –í–µ–±-–∫–∞–±–∏–Ω–µ—Ç")
    )
    builder.row(
        types.KeyboardButton(text="üîß VLESS –ö–æ–Ω—Ñ–∏–≥")
    )
    return builder.as_markup(resize_keyboard=True)

def get_cabinet_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="üì≤ –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∫–∞–±–∏–Ω–µ—Ç",
            web_app=WebAppInfo(url=WEB_APP_URL)
        )
    )
    builder.row(
        types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_cabinet"),
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    return builder.as_markup()

def get_ref_keyboard(user_id: int):
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="ü§úü§õ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π",
            url=f"https://t.me/share/url?url=https://t.me/{BOT_USERNAME}?start=ref_{user_id}"
        )
    )
    builder.row(
        types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_refs"),
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    return builder.as_markup()

def get_support_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="üìû –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
            url=f"https://t.me/{SUPPORT_NICK[1:]}"
        )
    )
    builder.row(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    return builder.as_markup()

def get_vless_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_vless"),
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    return builder.as_markup()

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def get_welcome_message(user_name: str, is_referral: bool = False):
    message = f"""
<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VAC VPN, {user_name}!</b>

üöÄ –ü–æ–ª—É—á–∏—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É —Å –Ω–∞—à–µ–π VPN-—Å–ª—É–∂–±–æ–π.

üìä <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ üîí –ó–∞—â–∏—Ç–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ üåê –û–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
‚Ä¢ üöÄ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
‚Ä¢ üì± –†–∞–±–æ—Ç–∞ –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö

üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</b>
–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–∫–∞–±–∏–Ω–µ—Ç —á–µ—Ä–µ–∑ –º–µ–Ω—é –±–æ—Ç–∞.
"""
    if is_referral:
        message += "\nüéâ <b>–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ! –ë–æ–Ω—É—Å 100‚ÇΩ —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!</b>"
    
    message += "\n\nüë´ <b>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å!</b>"
    
    return message

async def get_cabinet_message(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–±–∏–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ API"""
    user_data = await get_user_info(user_id)
    
    if user_data.get('error'):
        return f"""
<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç VAC VPN</b>

‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {user_data['error']}

üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
"""
    
    balance = user_data.get('balance', 0)
    has_subscription = user_data.get('has_subscription', False)
    subscription_days = user_data.get('subscription_days', 0)
    
    status_text = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if has_subscription else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
    
    if has_subscription:
        subscription_info = f"{subscription_days} –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å"
    else:
        subscription_info = "–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    referral_stats = user_data.get('referral_stats', {})
    total_referrals = referral_stats.get('total_referrals', 0)
    total_bonus_money = referral_stats.get('total_bonus_money', 0)
    
    return f"""
<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç VAC VPN</b>

üí∞ –ë–∞–ª–∞–Ω—Å: <b>{balance}‚ÇΩ</b>
üìÖ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: <b>{status_text}</b>
‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: <b>{subscription_info}</b>

üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>{total_referrals}</b>
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: <b>{total_bonus_money}‚ÇΩ</b>

üí° –î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∫–∞–±–∏–Ω–µ—Ç.
"""

def get_ref_message(user_id: int):
    return f"""
<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ VAC VPN</b>

–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ:
<code>https://t.me/{BOT_USERNAME}?start=ref_{user_id}</code>

üéÅ <b>–ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:</b>
‚Ä¢ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <b>50‚ÇΩ</b> –Ω–∞ –±–∞–ª–∞–Ω—Å
‚Ä¢ –í–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç <b>100‚ÇΩ</b> –Ω–∞ –±–∞–ª–∞–Ω—Å
‚Ä¢ –ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!

üí° –î–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!
"""

def get_support_message():
    return f"""
<b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ VAC VPN</b>

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:

üìû Telegram: {SUPPORT_NICK}
üì¢ –ù–∞—à –∫–∞–Ω–∞–ª: {TG_CHANNEL}

‚è∞ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 —á–∞—Å–æ–≤
"""

async def get_vless_message(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ API"""
    vless_data = await get_vless_config(user_id)
    
    if vless_data.get('error'):
        return f"""
<b>VLESS –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è</b>

‚ùå –û—à–∏–±–∫–∞: {vless_data['error']}

üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫a.
"""
    
    if not vless_data.get('configs'):
        return """
<b>VLESS –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è</b>

‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.

üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.
"""
    
    message = "<b>üîß VLESS –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è</b>\n\n"
    
    for config_data in vless_data['configs']:
        config = config_data['config']
        vless_link = config_data['vless_link']
        
        message += f"""
<strong>{config['name']}</strong>
<code>{vless_link}</code>

üì± <b>–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>
1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ
2. –í—Å—Ç–∞–≤—å—Ç–µ –≤ –≤–∞—à–µ VPN-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</b>
‚Ä¢ Android: V2RayNG
‚Ä¢ iOS: Shadowrocket
‚Ä¢ Windows: V2RayN
‚Ä¢ macOS: V2RayU
"""
    
    return message

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user = message.from_user
    args = message.text.split()
    is_referral = False
    referrer_id = None

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if len(args) > 1 and args[1].startswith('ref_'):
        try:
            referrer_id = args[1][4:]
            if referrer_id.isdigit() and int(referrer_id) != user.id:
                is_referral = True
                logger.info(f"üéØ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.id} –æ—Ç {referrer_id}")
        except:
            pass

    # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ API
    user_create_result = await create_user({
        "user_id": str(user.id),
        "username": user.username or "",
        "first_name": user.first_name or "",
        "last_name": user.last_name or "",
        "start_param": args[1] if len(args) > 1 else ""
    })

    logger.info(f"User create result: {user_create_result}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
    if is_referral and referrer_id:
        await send_referral_notification(int(referrer_id), user)

    await message.answer(
        text=get_welcome_message(user.first_name, is_referral),
        reply_markup=get_main_keyboard()
    )

@dp.message(Command("cabinet"))
async def cmd_cabinet(message: types.Message):
    user_id = message.from_user.id
    cabinet_text = await get_cabinet_message(user_id)
    await message.answer(cabinet_text, reply_markup=get_cabinet_keyboard())

@dp.message(Command("referral"))
async def cmd_referral(message: types.Message):
    user_id = message.from_user.id
    await message.answer(get_ref_message(user_id), reply_markup=get_ref_keyboard(user_id))

@dp.message(Command("support"))
async def cmd_support(message: types.Message):
    await message.answer(get_support_message(), reply_markup=get_support_keyboard())

@dp.message(Command("vless"))
async def cmd_vless(message: types.Message):
    user_id = message.from_user.id
    vless_text = await get_vless_message(user_id)
    await message.answer(vless_text, reply_markup=get_vless_keyboard(), disable_web_page_preview=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ–º F –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤)
@dp.message(F.text == "üîê –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def cabinet_handler(message: types.Message):
    await cmd_cabinet(message)

@dp.message(F.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª–∫–∞")
async def referral_handler(message: types.Message):
    await cmd_referral(message)

@dp.message(F.text == "üõ†Ô∏è –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_handler(message: types.Message):
    await cmd_support(message)

@dp.message(F.text == "üåê –í–µ–±-–∫–∞–±–∏–Ω–µ—Ç")
async def web_app_handler(message: types.Message):
    user = message.from_user
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="üì≤ –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∫–∞–±–∏–Ω–µ—Ç",
            web_app=WebAppInfo(url=WEB_APP_URL)
        )
    )
    await message.answer(
        f"üåê <b>–í–µ–±-–∫–∞–±–∏–Ω–µ—Ç VAC VPN</b>\n\n"
        f"–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–º –æ—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–∫–∞–±–∏–Ω–µ—Ç:",
        reply_markup=builder.as_markup()
    )

@dp.message(F.text == "üîß VLESS –ö–æ–Ω—Ñ–∏–≥")
async def vless_handler(message: types.Message):
    await cmd_vless(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu_handler(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é VAC VPN",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data == "refresh_cabinet")
async def refresh_cabinet_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cabinet_text = await get_cabinet_message(user_id)
    
    try:
        await callback.message.edit_text(cabinet_text, reply_markup=get_cabinet_keyboard())
        await callback.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        await callback.message.answer(cabinet_text, reply_markup=get_cabinet_keyboard())
        await callback.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

@dp.callback_query(F.data == "refresh_refs")
async def refresh_refs_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    new_ref_message = get_ref_message(user_id)
    
    try:
        await callback.message.edit_text(new_ref_message, reply_markup=get_ref_keyboard(user_id))
        await callback.answer("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        await callback.message.answer(new_ref_message, reply_markup=get_ref_keyboard(user_id))
        await callback.answer("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

@dp.callback_query(F.data == "refresh_vless")
async def refresh_vless_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    vless_text = await get_vless_message(user_id)
    
    try:
        await callback.message.edit_text(vless_text, reply_markup=get_vless_keyboard(), disable_web_page_preview=True)
        await callback.answer("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        await callback.message.answer(vless_text, reply_markup=get_vless_keyboard(), disable_web_page_preview=True)
        await callback.answer("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@dp.errors()
async def errors_handler(update: types.Update, exception: Exception):
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update}: {exception}")
    return True

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("ü§ñ –ë–æ—Ç VAC VPN –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    logger.info(f"üåê API —Å–µ—Ä–≤–µ—Ä: {API_BASE_URL}")
    logger.info(f"üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {WEB_APP_URL}")
    
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
def signal_handler(signum, frame):
    logger.info("üõë Received shutdown signal, stopping bot...")
    asyncio.create_task(shutdown())

async def shutdown():
    await bot.session.close()
    sys.exit(0)

if __name__ == "__main__":
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    asyncio.run(main())
