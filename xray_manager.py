class XrayManager:
    def __init__(self):
        self.script_path = "/usr/local/bin/add_vpn_user"
        
    async def add_user(self, email: str, uuid_str: str = None) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç"""
        try:
            logger.info(f"üîÑ Adding user via script: {email}")
            
            # –ù–∞ Railway –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞
            return await self.add_user_direct(email, uuid_str)
                
        except Exception as e:
            logger.error(f"‚ùå Error adding user via script: {e}")
            return False
    
    async def add_user_direct(self, email: str, uuid_str: str = None) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é –≤ –∫–æ–Ω—Ñ–∏–≥"""
        try:
            logger.info(f"üîÑ Adding user directly to config: {email}")
            
            if not uuid_str:
                uuid_str = str(uuid.uuid4())
            
            config_path = "/usr/local/etc/xray/config.json"
            
            # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
            with open(config_path, 'r') as f:
                config = json.load(f)
            
            new_user = {
                "id": uuid_str,
                "email": email,
                "flow": ""
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–µ—Ä–≤—ã–π inbound
            config['inbounds'][0]['settings']['clients'].append(new_user)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥
            with open(config_path, 'w') as f:
                json.dump(config, f, indent=2)
            
            # –ù–∞ Railway –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Xray —á–µ—Ä–µ–∑ pkill + –∑–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ
            await self.restart_xray()
            
            logger.info(f"‚úÖ User {email} successfully added directly to config")
            return True, uuid_str
            
        except Exception as e:
            logger.error(f"‚ùå Error adding user directly: {e}")
            return False, None
    
    async def restart_xray(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç Xray –Ω–∞ Railway"""
        try:
            # –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å Xray –∏ —É–±–∏–≤–∞–µ–º –µ–≥–æ
            subprocess.run(["pkill", "-f", "xray"], capture_output=True)
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
            await asyncio.sleep(2)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Xray –≤ —Ñ–æ–Ω–µ
            subprocess.Popen([
                "/usr/local/bin/xray", "run", "-config", "/usr/local/etc/xray/config.json"
            ])
            
            logger.info("‚úÖ Xray restarted")
            
        except Exception as e:
            logger.error(f"‚ùå Error restarting Xray: {e}")
    
    async def remove_user(self, email: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞"""
        try:
            logger.info(f"üîÑ Removing user from config: {email}")
            
            config_path = "/usr/local/etc/xray/config.json"
            
            # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
            with open(config_path, 'r') as f:
                config = json.load(f)
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for inbound in config['inbounds']:
                if inbound.get('tag') == 'inbound-1':
                    original_count = len(inbound['settings']['clients'])
                    inbound['settings']['clients'] = [
                        client for client in inbound['settings']['clients'] 
                        if client.get('email') != email
                    ]
                    new_count = len(inbound['settings']['clients'])
                    
                    if new_count < original_count:
                        logger.info(f"‚úÖ Removed user {email} from config")
                    break
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥
            with open(config_path, 'w') as f:
                json.dump(config, f, indent=2)
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Xray
            await self.restart_xray()
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error removing user: {e}")
            return False
